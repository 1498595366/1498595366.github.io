<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>接口安全拦截设计与实现</title>
      <link href="/posts/58034.html"/>
      <url>/posts/58034.html</url>
      
        <content type="html"><![CDATA[<h3 id="接口安全拦截设计与实现"><a href="#接口安全拦截设计与实现" class="headerlink" title="接口安全拦截设计与实现"></a>接口安全拦截设计与实现</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>​    当今Java领域主流的企业级开发方式都采用前后端绝对分离的方式开发以及部署。很多情况下为了赶开发进度或者兼顾不同业务场景请求，很多开发者会在多个接口中使用同一个DTO(数据传递对象)与前端对接。</p><p>​    虽然能够正常使用，但是违背了开闭原则，造成了接口安全隐患。</p><h4 id="接口安全隐患"><a href="#接口安全隐患" class="headerlink" title="接口安全隐患"></a>接口安全隐患</h4><p>​    传统的主流方案是通过设置token的方式，但是打开浏览器F12功能复制请求记录为<code>CURL bash</code>，导入<code>Apipost</code>之类的接口调试工具后可携带token对后端发起请求。</p><p><a href="https://imgse.com/i/pAwQO9H"><img src="https://s21.ax1x.com/2024/10/25/pAwQO9H.png" alt="pAwQO9H.png"></a></p><p><a href="https://imgse.com/i/pAwQX3d"><img src="https://s21.ax1x.com/2024/10/25/pAwQX3d.png" alt="pAwQX3d.png"></a></p><p><a href="https://imgse.com/i/pAwQjgA"><img src="https://s21.ax1x.com/2024/10/25/pAwQjgA.png" alt="pAwQjgA.png"></a></p><p>​    接口未做安全处理很容易导致数据泄密，例如在做了dataScop(数据范围控制)的平台中查看详情，通过id查询通常会为了享受索引的高效不会刻意去加dataScop拦截处理。那么通过该方式获取curl导入<code>Apipost</code>后再修改请求的id，很有可能可以看到其他用户的信息，造成数据泄露。</p><p>​    通过设置参数进行恶意请求篡改数据或者编写脚本拿到token进行恶意并发访问，都容易造成很多严重后果。</p><h4 id="设计方案"><a href="#设计方案" class="headerlink" title="设计方案"></a>设计方案</h4><p>​    前后端使用同一套算法机制生成动态令牌并在请求后端接口时携带令牌。后端全局拦截请求客户端请求，生成动态令牌校验是否符合请求要求。</p><p><a href="https://imgse.com/i/pAwQbND"><img src="https://s21.ax1x.com/2024/10/25/pAwQbND.png" alt="pAwQbND.png"></a></p><h4 id="实现源码"><a href="#实现源码" class="headerlink" title="实现源码"></a>实现源码</h4><p><code>完整 demo</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/shengyulv/demo-req-interception.git</span><br></pre></td></tr></table></figure><h4 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h4><p>​    前端请求拦截：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> config <span class="keyword">from</span> <span class="string">&#x27;@/config&#x27;</span></span><br><span class="line"><span class="keyword">import</span> errorCode <span class="keyword">from</span> <span class="string">&#x27;@/util/errorCode&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="number">10000</span></span><br><span class="line"><span class="keyword">const</span> baseUrl = config.<span class="property">baseUrl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 请求拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; config </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">request</span> = config =&gt; &#123;</span><br><span class="line">  <span class="comment">// 确保 config.header 是一个对象</span></span><br><span class="line">  config.<span class="property">header</span> = config.<span class="property">header</span> || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> key = <span class="title function_">getRequestKey</span>()</span><br><span class="line">  <span class="comment">// console.log(&#x27;key ----------&#x27;, key)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取请求key 获取接口请求权限</span></span><br><span class="line">  config.<span class="property">header</span>[<span class="string">&#x27;Request-Key&#x27;</span>] = key + <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    uni.<span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: config.<span class="property">method</span> || <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">timeout</span>: config.<span class="property">timeout</span> || timeout,</span><br><span class="line">      <span class="attr">url</span>: config.<span class="property">baseUrl</span> || baseUrl + config.<span class="property">url</span>,</span><br><span class="line">      <span class="attr">data</span>: config.<span class="property">data</span>,</span><br><span class="line">      <span class="attr">header</span>: config.<span class="property">header</span>,</span><br><span class="line">      <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">      <span class="attr">success</span>: <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = response</span><br><span class="line">        <span class="keyword">const</span> code = res.<span class="property">data</span>.<span class="property">code</span> || <span class="number">200</span></span><br><span class="line">        <span class="keyword">const</span> msg = res.<span class="property">data</span>.<span class="property">message</span></span><br><span class="line">        <span class="keyword">if</span> (code === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(&#123; code, msg &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">fail</span>: <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 处理请求失败的情况，例如超时、网络错误等</span></span><br><span class="line">        <span class="title function_">reject</span>(errorCode.<span class="title function_">handleRequestError</span>(error))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求动态令牌 获取访问权限</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 请求动态令牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getRequestKey</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(now.<span class="title function_">getTime</span>() / <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> request</span><br></pre></td></tr></table></figure><p>​    后端接口拦截：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demoreqinterceptionapi.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demoreqinterceptionapi.result.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.example.demoreqinterceptionapi.util.PubUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口安全拦截器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/7/6</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Order(1)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiSecureInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启接口请求校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;api-power&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Boolean powerKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端预请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">OPTIONS_METHOD</span> <span class="operator">=</span> <span class="string">&quot;OPTIONS&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置处理 判断是否包含请求key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request  http请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response http响应对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler  处理器对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否放行请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestMethod</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">        <span class="keyword">if</span> (OPTIONS_METHOD.equalsIgnoreCase(requestMethod)) &#123;</span><br><span class="line">            <span class="comment">// 前端预请求直接放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取请求动态令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestKey</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Request-Key&quot;</span>);</span><br><span class="line">        log.info(<span class="string">&quot;requestKey ------ &#123;&#125;&quot;</span>, requestKey);</span><br><span class="line">        <span class="keyword">if</span> (powerKey) &#123;</span><br><span class="line">            <span class="comment">// 校验请求是否允许</span></span><br><span class="line">            checkRequestKey(requestKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 放行请求</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 误差范围</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;error-range&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer errorRange;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验请求接口权限 (接口防刷机制)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestKey 请求动态动态令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">checkRequestKey</span><span class="params">(String requestKey)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(requestKey)) &#123;</span><br><span class="line">            BusinessException.throwException(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">epochSecond</span> <span class="operator">=</span> instant.getEpochSecond();</span><br><span class="line">        log.info(<span class="string">&quot;epochSecond [&#123;&#125;] requestKey[&#123;&#125;]&quot;</span>, epochSecond, requestKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 时间设定在误差允许范围内可访问  误差范围2</span></span><br><span class="line">        <span class="keyword">if</span> (epochSecond - Long.parseLong(requestKey) &gt; errorRange) &#123;</span><br><span class="line">            BusinessException.throwException(<span class="string">&quot;非法请求&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    案例中是将请求动态令牌放入http请求的header中。必须考虑前端发起<code>预请求</code>以<code>OPTIONS</code>方式进行请求是不会携带header的。例如<code>uniapp</code>技术默认情况下请求后端接口会先进行 <code>OPTIONS</code>方式进行<code>预请求</code>，只是用于校验后端接口是否能请求通并不会真正执行任何操作，但是如果无法请求通过后续接口则会无法请求。所以必须放过<code>OPTIONS</code>方式<code>预请求</code>不做校验。</p><p>​    前后端动态令牌生成方案采用最为核心的时间戳，可以根据实际情况做出扩展设计，例如用凯撒密码或者多层时间戳拼接作为动态令牌等方案。</p><p>​    在技术角度必须考虑很多因素，开发阶段可能会涉及到频繁的前后端联调，直接把接口锁死无法用调试工具请求不太现实。前后端对接必须考虑网络延时或服务器响应时间等因素，后端接收到前端请求是会存在一定时间差的。一些特殊场景，如第与三方平台对接需要彻底放开接口请求校验。所以需要将上述因素提升为配置，适应系统开发。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启接口动态令牌请求校验</span></span><br><span class="line"><span class="attr">api-power</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 动态令牌校验误差范围</span></span><br><span class="line"><span class="attr">error-range</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"># 访问白名单</span></span><br><span class="line"><span class="attr">system.white.list</span>=<span class="string">/api/get_service_name</span></span><br></pre></td></tr></table></figure><p>​    可通过配置的方式，调整是否开启校验、误差范围和访问白名单。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​    该方案相当于通过动态令牌把后端接口彻底锁死，正常情况下只允许从前端页面访问。</p><p><a href="https://imgse.com/i/pAwQzut"><img src="https://s21.ax1x.com/2024/10/25/pAwQzut.png" alt="pAwQzut.png"></a></p><p>正常校验情况下用Apipost调用请求会被拦截。</p><p><a href="https://imgse.com/i/pAwlpHf"><img src="https://s21.ax1x.com/2024/10/25/pAwlpHf.png" alt="pAwlpHf.png"></a></p><p>​    对于特殊场景可以通过设置白名单的方式进行访问。</p><p><a href="https://imgse.com/i/pAwlCE8"><img src="https://s21.ax1x.com/2024/10/25/pAwlCE8.png" alt="pAwlCE8.png"></a></p><p>通过该方案可以做到最大限度的防范项目上线后，通过http抓包工具以及接口调试工具进行恶意访问以及自动化脚本方式针对接口进行数据爬取，提升系统安全。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>自定义代码生成器开发</title>
      <link href="/posts/33645.html"/>
      <url>/posts/33645.html</url>
      
        <content type="html"><![CDATA[<h2 id="自定义代码生成器开发"><a href="#自定义代码生成器开发" class="headerlink" title="自定义代码生成器开发"></a>自定义代码生成器开发</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>​    代码生成技术起源于早期的软件开发实践，当时的开发者们面临着编写大量重复性代码的挑战。这种需求促使了代码生成（Codegen）技术的发展，其核心思想是通过自动化工具或框架，根据预定义的模板或规则，自动生成源代码文件。这些生成的代码可能包括数据结构定义、API接口、测试用例等，从而显著减少手动编码的工作量，提高代码的一致性和可维护性。</p><h3 id="常见代码生成解决方案"><a href="#常见代码生成解决方案" class="headerlink" title="常见代码生成解决方案"></a>常见代码生成解决方案</h3><table><thead><tr><th align="left">名称</th><th>优势</th><th>缺点</th></tr></thead><tbody><tr><td align="left">IDEA插件 easycode</td><td>简单易用</td><td>局限于IDEA开发工具，难以做自定义配置。</td></tr><tr><td align="left">mybatis-plus generator</td><td>简单易用，不限工具平台</td><td>代码耦合度大，不适合做自定义改动。</td></tr><tr><td align="left">IDEA插件 mybatisCodeHelperPro</td><td>简单易用</td><td>局限于IDEA开发工具，并不开源。无法做自定义改动。</td></tr></tbody></table><p>​    常见的代码生成器方案还有很多，但是都有很大的局限性，不方便做个性化改造用于适配自己的项目以及编码风格。</p><h3 id="自定义代码生成器源码"><a href="#自定义代码生成器源码" class="headerlink" title="自定义代码生成器源码"></a>自定义代码生成器源码</h3><p>​    为规避掉种种弊端，最佳的方案就是去实现一套自定义的代码生成器，用于适配项目结构以及编码风格，用于降低工作量并提升开发效率。</p><p>开源地址:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/shengyulv/code-generator-component.git</span><br><span class="line"></span><br><span class="line">1.1.1-monomer 稳定版本 单体应用生成方案</span><br><span class="line">1.2.1-dubbo-cloud稳定版本 dubbo微服务应用生成方案</span><br><span class="line"></span><br><span class="line">注：由于是方便个人项目开发，做了深度自定义化开发，需要使用还需要根据实际情况改动。</span><br><span class="line">sql脚本位于启动模块doc目录中，仅仅只做开发调试使用，并无实际意义。</span><br></pre></td></tr></table></figure><h3 id="自定义代码生成器实现思路"><a href="#自定义代码生成器实现思路" class="headerlink" title="自定义代码生成器实现思路"></a>自定义代码生成器实现思路</h3><p><a href="https://imgse.com/i/pAdk3RO"><img src="https://s21.ax1x.com/2024/10/22/pAdk3RO.jpg" alt="pAdk3RO.jpg"></a><br>​    最核心的技术在于模板引擎技术<code>Velocity</code> ，通过读取数据库表信息作为参数（操作者手动选择生成文件），调用模版引擎进行文件输出达到生成代码目的。例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> <span class="string">&quot;HelloService&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class $&#123;className&#125; &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用模板引擎渲染后 则会在指定文件中生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloService</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>架构图：</p><p><a href="https://imgse.com/i/pAdk4YV"><img src="https://s21.ax1x.com/2024/10/22/pAdk4YV.md.png" alt="pAdk4YV.md.png"></a></p><ol><li>架构方式：<br>采用DDD领域驱动设计思想以及springBoot分模块开发方式进行架构。</li><li>后端技术选型:<br>Spring、SpringJdbcTemplate、Lombook、Apache Velocity、Hutool</li><li>前端技术选型：<br>Vue、ElementUI</li></ol><p>模块设计拆分：</p><table><thead><tr><th>模块</th><th>描述</th></tr></thead><tbody><tr><td>code-generator-core</td><td>组件源码，主要功能模块</td></tr><tr><td>code-generator-start</td><td>项目启动模块 （包含演示所需sql）</td></tr><tr><td>code-generator-ui</td><td>项目前端模块</td></tr></tbody></table><p>​    为了支持单独作为工具使用并同时支持作为maven技术组件使用，按照Springboot多模块开发的思想，将项目启动模块，前端模块以及具体业务功能模块进行了彻底拆分。后端业务功能模块  <code>code-generator-core</code> 通过 <code>springFactory</code>技术进行注入。模板配置文件则完全放入业务功能模块，方便后续maven发布。</p><p>​    部分关键信息提取为配置类，方便更灵活的使用</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># =====================代码生成相关配置=====================</span></span><br><span class="line"><span class="comment"># 逻辑删除字段名称</span></span><br><span class="line"><span class="attr">generator.table-delete-logic-flag</span>=<span class="string">delete_flag</span></span><br><span class="line"><span class="comment"># 创建时间字段名称</span></span><br><span class="line"><span class="attr">generator.table-insert-time-flag</span>=<span class="string">create_time</span></span><br><span class="line"><span class="comment"># 修改时间字段名称</span></span><br><span class="line"><span class="attr">generator.table-update-time-flag</span>=<span class="string">update_time</span></span><br><span class="line"><span class="comment"># 是否删除代码生成临时文件</span></span><br><span class="line"><span class="attr">generator.delete</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><p>​    该项目借鉴<code> DDD 领域驱动设计</code>思想，用四层架构的方式彻底解耦数据信息查询显示以及代码生成逻辑。采用vue+elementUi 制作可视化界面方便操作。</p><p><a href="https://imgse.com/i/pAdksSS"><img src="https://s21.ax1x.com/2024/10/22/pAdksSS.png" alt="pAdksSS.png"></a></p><p><a href="https://imgse.com/i/pAdk6yQ"><img src="https://s21.ax1x.com/2024/10/22/pAdk6yQ.png" alt="pAdk6yQ.png"></a></p><p>​    方便后续进行扩展升级开发，适配更多数据库。代码生成部分使用<code>策略模式</code>的方式调用具体模块生成代码逻辑，实现彻底解耦合，更适合在编码风格以及生成文件方面做自定义改造。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.codegenerator.service.GeneratorService#generator</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pAdkBJf"><img src="https://s21.ax1x.com/2024/10/22/pAdkBJf.png" alt="pAdkBJf.png"></a></p><h3 id="自定义代码生成器打包使用"><a href="#自定义代码生成器打包使用" class="headerlink" title="自定义代码生成器打包使用"></a>自定义代码生成器打包使用</h3><p>​    由于前后端是分离开发的，为了方便开箱即用，可以参考开源可视化api项目 <code>knife4j</code>的部署方式，将前端执行打包命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>而后将其打包后的文件夹<code>dist</code> 将其放置到<code>code-generator-core</code>模块下的<code>resources/static</code>目录下。由于Vue脚手架设计的初衷是为了方便打包后在ngix部署，打包后的文件都是相对路径。该方案是在<code>Tomcat</code>容器 部署，相对路径会存在问题需要手动做一些修改。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">utf-8</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">viewport</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>code-generator-ui<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">/dist/static/css/app.本机打包生成的文件全名.css</span> <span class="attr">rel</span>=<span class="string">stylesheet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">app</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/dist/static/js/manifest.本机打包生成的文件全名.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script type=text/javascript src=/dist/static/js/manifest.2ae2e69a05c33dfc65f8.js&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/dist/static/js/vendor.本机打包生成的文件全名.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script type=text/javascript src=/dist/static/js/vendor.25c4a62f25258251fad1.js&gt;&lt;/script&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">text/javascript</span> <span class="attr">src</span>=<span class="string">/dist/static/js/app.本机打包生成的文件全名.js</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;script type=text/javascript src=/dist/static/js/app.a05810029ad4ed9d0302.js&gt;&lt;/script&gt;--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该工具打包后的css文件中也会有两个搜索框相关的图标用的是elementUI提供的图标，打包后是相对路径也需要用上述方法手动处理。</p><p>​    前端文件打包放到后端后可启动项目，当可直接在访问地址 <a href="http://127.0.0.1:8098/dist/index.html#/tables%E6%97%B6%EF%BC%8C%E6%89%8D%E5%8F%AF%E8%BF%9B%E8%A1%8C%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85%E3%80%82%E4%B8%BA%E4%BA%86%E6%96%B9%E4%BE%BF%E6%89%93%E5%8C%85%EF%BC%8C%E6%8E%A8%E8%8D%90%E5%9C%A8IDEA%E5%AE%89%E8%A3%85">http://127.0.0.1:8098/dist/index.html#/tables时，才可进行后端项目打包。为了方便打包，推荐在IDEA安装</a> <code>maven Helper</code> 插件，必须整体执行打包操作否则会无法正常运行。</p><h4 id="技术组件方式打包"><a href="#技术组件方式打包" class="headerlink" title="技术组件方式打包"></a>技术组件方式打包</h4><p><code>maven Helper</code> 插件<code>整体</code>执行maven  install进行安装，有maven私服的情况下也可用maven deploy命令发布到私服。</p><p><a href="https://imgse.com/i/piLzYW9"><img src="https://s11.ax1x.com/2023/12/30/piLzYW9.png" alt="piLzYW9.png"></a></p><p>​    该工具是采用的是springBoot分模块开发技术开发的，启动模块和代码生成相关的核心模块在技术层面上是做了解耦合的,并且在 <code>code-generator-core</code>模块中添加了配置类和springFactories文件。所以在项目maven中只需要引入<code>code-generator-core</code>模块再进行关键信息配置即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码生成器依赖 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>code-generator-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1-dubbo-cloud<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  <span class="comment">&lt;!-- 1.1.0-monomer 单体架构版本   1.2.1-dubbo-cloud  dubbo微服务架构版本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    <code>注意</code>当做技术组件使用的情况下则必须考虑项目结构，有没有采用分模块方式开发，是否删除代码生成临时文件配置为true的话可能会删除整个项目文件。建议先关闭删除，进行调试。如果需要修改，可修改该工具中指定删除目录生成代码并重新 install。    </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.example.codegenerator.domain.impl.GeneratorDomainApplicationImpl#removeFile</span><br></pre></td></tr></table></figure><p>​    若项目引入了权限框架，会存在代码生成器无法正常使用的问题，需要根据实际情况进行单独处理。例如在springSecurity配置类中单独处理放行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许访问并使用代码生成器</span></span><br><span class="line">.antMatchers(<span class="string">&quot;/api/v1/load_table&quot;</span>, <span class="string">&quot;/api/v1/generator_download&quot;</span>, <span class="string">&quot;/api/v1/get_application_name&quot;</span>,<span class="string">&quot;/dist/index.html&quot;</span>, <span class="string">&quot;/dist/static/css/**&quot;</span>, <span class="string">&quot;/favicon.ico&quot;</span>, <span class="string">&quot;/dist/static/js/**&quot;</span>, <span class="string">&quot;/dist/static/fonts/**&quot;</span>).permitAll()</span><br></pre></td></tr></table></figure><p>项目启动成功后可访问路径 <code>ip地址+端口+/dist/index.html#/tables</code>后即可打开代码生成器页面。</p><h4 id="Jar包方式打包"><a href="#Jar包方式打包" class="headerlink" title="Jar包方式打包"></a>Jar包方式打包</h4><p>​    jar方式打包只需要在项目中修改数据库连接信息，以及关键信息配置后，整体执行 maven package命令，在target目录中找到jar包，命令框执行命令启动即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar code-generator-start-x.x-SNAPSHOT.jar</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sprinboot分模块开发</title>
      <link href="/posts/58035.html"/>
      <url>/posts/58035.html</url>
      
        <content type="html"><![CDATA[<h1 id="sprinboot分模块开发"><a href="#sprinboot分模块开发" class="headerlink" title="sprinboot分模块开发"></a>sprinboot分模块开发</h1><h3 id="软件架构方式演进"><a href="#软件架构方式演进" class="headerlink" title="软件架构方式演进"></a>软件架构方式演进</h3><p>​        Java技术栈软件架构的演进过程依次包括——单体架构、垂直架构、SOA架构、微服务架构、云原生架构。</p><p>​        <code>单体架构</code>虽然是最初的形态，但是并不意味着<code>单体架构</code>是过时的产物。在一些小规模的系统设计方案中，例如小规模系统数据表不超过二十张并且用于部署的服务器只有一台的情况下。如果盲目的采用微服务技术，在服务器资源有限的情况下，部署一堆微服务所需要的中间件将会占用很大部分服务器资源，即使将服务合理拆分也无法做到资源合理利用。所以在上述场景中<code>单体架构</code>依然是首选。</p><h3 id="为什么需要分模块开发"><a href="#为什么需要分模块开发" class="headerlink" title="为什么需要分模块开发"></a>为什么需要分模块开发</h3><p>​        SpringBoot单体架构分模块开发，其实可以理解为是设计模式中的<code>分层思想</code>的延续。将模块划分拆解后可以达到<code>技术层面</code>以及<code>业务层面</code>的高度解耦合。例如著名的Gitee GVIP级开源项目<code>若依</code>单体版，就是典型的SpringBoot单体架构分模块开发的案例。</p><p>​        SpringBoot单体架构分模块开发还可以作为技术组件的开发方式。可以将项目中的公共部分写到一个模块当中，配合<code>Spring SPI 机制</code>执行maven install命令（有maven私服的情况下可以使用 maven deploy命令），即可在后续新开启的项目中将该模块通过maven依赖引入。可以适应流行的 <code>markbatch模式</code>达到高效率开发的目的。</p><h3 id="分模块开发的方式"><a href="#分模块开发的方式" class="headerlink" title="分模块开发的方式"></a>分模块开发的方式</h3><p>​        SpringBoot进行分模块开发。会存在和启动类不在同一个模块下并且需要注入Spring容器中的模块无法被依赖，导致项目无法成功启动。所以必须将其注入<code>Spring容器</code>，大致有三种实现方案。  <code>完整demo</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/shengyulv/spring-boot-multi-module.git</span><br></pre></td></tr></table></figure><h4 id="包名称相同方式"><a href="#包名称相同方式" class="headerlink" title="包名称相同方式"></a>包名称相同方式</h4><p>​        第一种方案，可参考 <code>spring-boot-multi-module-first</code>。每个模块都采用与<code>springboot启动类</code>完全相同的包名称  <code>com.example.first</code> 作为父级目录。</p><p><img src="../springboot%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.assets/image-20240104220436659.png" alt="image-20240104220436659"></p><p>通过该方案，可以在无需添加任何额外配置的情况下，启动SpringBoot容器时将所有的模块加载并注入<code>Spring容器</code>。</p><h4 id="包扫描方式"><a href="#包扫描方式" class="headerlink" title="包扫描方式"></a>包扫描方式</h4><p>​        第二种方案，可参考 <code>spring-boot-multi-module-second</code>，采用springboot框架提供的注解 <code>@SpringBootApplication</code>中的 <code>scanBasePackages</code>属性进行包扫描将需要被装配的模块注入<code>Spring容器</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.example&quot;)</span></span><br></pre></td></tr></table></figure><p>使用该方案进行装配，包路径<code>com.example</code>必须是需要注入<code>Spring容器</code>的模块的父级包。</p><p><img src="../springboot%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.assets/image-20240104220802192.png" alt="image-20240104220802192"></p><h4 id="spring-factories-方式"><a href="#spring-factories-方式" class="headerlink" title="spring factories 方式"></a>spring factories 方式</h4><p>​        第三种方案，可参考 <code>spring-boot-multi-module-third</code>，采用<code>Spring SPI </code>技术进行装配。可参考SpringBoot框架源码，在<code>@SpringBootApplication</code>注解中嵌入了一个用于自动装配的核心注解<code>@EnableAutoConfiguration</code>。在需要被装配的模块中创建一个配置类，用于加载当前模块。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.business.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务模块配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/01/03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example.business&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中的<code>@ComponentScan(&quot;com.example.business&quot;)</code>用于扫描当前模块需要被装配的包路径。</p><p><img src="../springboot%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.assets/image-20240104220317970.png" alt="image-20240104220317970"></p><p>在该模块的<code>resoures</code>目录创建文件夹 <code>META-INF</code>并定义<code>spring.factories</code>文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Auto Configure</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">com.example.business.config.BusinessConfig</span><br></pre></td></tr></table></figure><p>做好上述配置后，只需要引入maven依赖做到自动装配。</p><h3 id="打包方式"><a href="#打包方式" class="headerlink" title="打包方式"></a>打包方式</h3><p>​        SpringBoot多模块开发必须设定maven打包插件，在有<code>SpringBoot启动类</code>的模块中配置 maven打包插件并指向启动类。 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 指定该Main Class为全局的唯一入口 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.example.web.SecondJarApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span><span class="comment">&lt;!--可以把依赖的包都打包到生成的Jar包中--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        执行 <code>maven package</code>时，必须在父模块执行，否则会出现依赖丢失的问题。推荐安装IDEA <code>maven Helper</code>插件，方便执行maven操作。</p><p><img src="../springboot%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.assets/image-20240104221846468.png" alt="image-20240104221846468"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        上述三种方式目的一致，将没有启动类的模块装配到<code>Spring容器</code>中。各有千秋，第一种方式最为简单。第二种方式包命名可以更加灵活。第三种方式更适合用于技术组件代码开发，可以将包含<code>spring.factories</code>文件的模块通过<code>maven install</code>命令安装到本地maven仓库或者通过 <code>maven deploy</code> 命令发布到maven私服后作为maven依赖使用。在新项目中可以直接通过maven引入使用。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-multi-module-third-business<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>注意</code>，打包方式必须是<code>整个服务打包</code>，否则会出现依赖丢失或者版本丢失等问题。</p><p><img src="../springboot%E5%88%86%E6%A8%A1%E5%9D%97%E5%BC%80%E5%8F%91.assets/image-20240104223213055.png" alt="image-20240104223213055"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式对项目架构带来的质变</title>
      <link href="/posts/58033.html"/>
      <url>/posts/58033.html</url>
      
        <content type="html"><![CDATA[<h3 id="设计模式对项目架构带来的质变"><a href="#设计模式对项目架构带来的质变" class="headerlink" title="设计模式对项目架构带来的质变"></a>设计模式对项目架构带来的质变</h3><h4 id="设计模式简介"><a href="#设计模式简介" class="headerlink" title="设计模式简介"></a>设计模式简介</h4><p>设计模式思想起源于建筑行业，最早将模式的思想引入软件工程方法学的是1991-1992年以“四人组(Gang of Four，简称GoF，分别是Erich Gamma, Richard Helm, Ralph Johnson和John Vlissides)”自称的四位著名软件工程学者，他们在1994年归纳发表了23种在软件开发中使用频率较高的设计模式 。</p><p>目的在于借助设计模式能够让软件开发人员在开发过程中降低代码复杂度，提高代码可复用性，可维护性以及健壮性。</p><h4 id="常见设计模式"><a href="#常见设计模式" class="headerlink" title="常见设计模式"></a>常见设计模式</h4><p>创建型模式，共五种：工厂方法模式、抽象工厂模式、单例模式、建造者模式、原型模式。</p><p>结构型模式，共七种：适配器模式、装饰器模式、代理模式、外观模式、桥接模式、组合模式、享元模式。</p><p>行为型模式，共十一种：策略模式、模板方法模式、观察者模式、迭代子模式、责任链模式、命令模式、备忘录模式、状态模式、访问者模式、中介者模式、解释器模式。</p><p>常见的设计模式有二十三种，在常用的Spring框架源码中随处可见。例如采用 @Autowired注解的方式，默认以单例模式的方式实例化对象。对其使用方式以及思想不太了解推荐阅读《图解设计模式》或者阅读菜鸟教程分享的设计模式学习资源</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.runoob.com/design-pattern/design-pattern-tutorial.html</span><br></pre></td></tr></table></figure><h4 id="设计模式运用"><a href="#设计模式运用" class="headerlink" title="设计模式运用"></a>设计模式运用</h4><p>虽然在框架底层源码中随处可见，但是在业务代码的开发过程中设计模式运用却相对较少，以至于很多开发人员不懂的怎样用设计模式为程序带来<code>质变</code>的效果。</p><p>以相对简单一点的<code>门面模式</code>为案例（Facade 外观模式中的一种，是为了降低客户端和各种子系统的交互复杂度的,其实 preset 就是一种 门面模式的思想），将复杂代码逻辑封装只对外暴露出，能够非常有效的降低代码整体复杂度。具体可参考菜鸟教程</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.runoob.com/w3cnote/facade-pattern-3.html</span><br></pre></td></tr></table></figure><p>虽然不可能将代码原封不动的搬到项目中来，但是可以借鉴门面模式的思想来进行开发。可以借鉴其思想用来封装工具类</p><p><code>完整demo</code>地址</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/shengyulv/demo-map.git</span><br></pre></td></tr></table></figure><p>其中使用工具类MapUtils用于实例化HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itlv.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itlv.jdk9sources.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Map工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/6/4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapUtils</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建HashMap （默认长度为8）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; key泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; Value泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hashMap对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">newHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建HashMap （自定义长度）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;K&gt; key泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;V&gt; Value泛型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> hashMap对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">newHashMap</span><span class="params">(<span class="type">int</span> length)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>采用工具类的方式实例化HashMap必须考虑集合的泛型以及返回值Map类型的泛型，所以必须采用 &lt;K,V&gt;的方式来定义方法返回值。阿里阿巴巴代码规约强制实例化HashMap时必须指定长度，该默认方式是长度设为8也可更具实际情况采用自定义长度的方式进行实例化。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;K, V&gt; Map&lt;K, V&gt; <span class="title function_">newHashMap</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>光是看这段代码或许会看不出所以然，只会感觉平平无奇。但是可以采用这种方式在不改变JDK8稳定版本以及代码整体复杂度的情况下创建自定义JDK版本的HashMap对象。</p><p>以OpenJdk9版本为例，源码下载地址</p> <figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://hg.openjdk.org/jdk9/sandbox/jdk/</span><br></pre></td></tr></table></figure><p><img src="../%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%B4%A8%E5%8F%98.assets/image-20230604162343267.png" alt="image-20230604162343267"></p><p>点击 zip 进行源码下载。</p><p><img src="../%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%B4%A8%E5%8F%98.assets/image-20230604145615987.png" alt="image-20230604145615987"></p><p><img src="../%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%B4%A8%E5%8F%98.assets/image-20230604145654675.png" alt="image-20230604145654675"></p><p>通过代码对比工具 beyond compare 可看出，左侧的Jdk9版本HashMap相比于Jdk8版本HashMap使用了许多增强for语句。健壮性优于Jdk8版本的HashMap，当数据量特别大时增强for性能将远强于普通for循环。</p><p>所以，可以将OpenJdk9的HashMap源码迁移到项目的自定义包中，根据实际情况选择OpenJdk9版本HashMap所需要依赖的类迁移到同一个目录中，防止编译报错。这样一来只需要在MapUtils工具类中实例化HashMap时，选择导入OpenJdk9 版本的HashMap即可。</p><p><img src="../%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%B4%A8%E5%8F%98.assets/image-20230604150822565.png" alt="image-20230604150822565"></p><p>通过调用HashMap API再 Debug的方式断点调试可以判断出，创建的HashMap是否是调用OpenJdk9版本的HashMap。</p><p><img src="../%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%AF%B9%E9%A1%B9%E7%9B%AE%E5%B8%A6%E6%9D%A5%E7%9A%84%E8%B4%A8%E5%8F%98.assets/image-20230604151808429.png" alt="image-20230604151808429"></p><p>通过上述方案，借鉴门面模式的思想。可以达到项目整体运行在Jdk8版本的<code>稳定环境</code>上,但是同时可以享用更高Jdk版本的HashMap的优势。保证稳定的同时<code>提升编程语言层面的优势</code>,达到为项目带来质变的目的。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基于SpringAOP封装自定义注解实现MQ幂等</title>
      <link href="/posts/38191.html"/>
      <url>/posts/38191.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于SpringAOP封装自定义注解实现MQ幂等"><a href="#基于SpringAOP封装自定义注解实现MQ幂等" class="headerlink" title="基于SpringAOP封装自定义注解实现MQ幂等"></a>基于SpringAOP封装自定义注解实现MQ幂等</h1><h3 id="什么是MQ"><a href="#什么是MQ" class="headerlink" title="什么是MQ"></a>什么是MQ</h3><p><code>mq</code> 是消息队列的统称，全称<code>message queue </code>是用于通信的中间件。在垂直架构时代几乎是主流的系统间通信方式。</p><p>在如今流行微服务的时代，MQ依然有着非常重要的作用。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1、对接第三方平台 ———— 例如 OA系统对接银行发放工资接口、票据系统对接票交所实现票据交易。</span><br><span class="line">2、高并发场景下削峰填谷 ———— 例如 电商系统对接ERP库存系统进行库存扣减。</span><br></pre></td></tr></table></figure><h3 id="MQ环境搭建"><a href="#MQ环境搭建" class="headerlink" title="MQ环境搭建"></a>MQ环境搭建</h3><p>由于考虑到RabbitMq在部署方面的难度低，以及大多数企业在消息中间件层面技术选型是RabbitMq。所以采用RabbitMq进行演示。为避免电脑系统环境差异导致的各种各样意想不到的问题，部署RabbitMq采用虚拟容器docker的方式进行部署。</p><p>前提是必须安装docker,首先下载RabbitMq镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq</span><br></pre></td></tr></table></figure><p>当镜像下载完成后，在命令输入框输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="../%E5%9F%BA%E4%BA%8ESpringAOP%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0MQ%E5%B9%82%E7%AD%89.assets/iShot_2023-04-02_17.32.30.png" alt="iShot_2023-04-02_17.32.30"></p><p>若不存在RabbitMq镜像则必须重试上一次操作，直到镜像下载成功才能进行启动操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 15672:15672 -p 5672:5672 \</span><br><span class="line">-e RABBITMQ_DEFAULT_VHOST=设置成自己的RabbitMq虚拟机名称  \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=设置成自己的账号 \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=设置成自己的密码 \</span><br><span class="line">--hostname myRabbit \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">rabbitmq</span><br><span class="line"></span><br><span class="line">-- 完整案例</span><br><span class="line">docker run -d -p 15672:15672 -p 5672:5672 \</span><br><span class="line">-e RABBITMQ_DEFAULT_VHOST=vhost  \</span><br><span class="line">-e RABBITMQ_DEFAULT_USER=test \</span><br><span class="line">-e RABBITMQ_DEFAULT_PASS=123456 \</span><br><span class="line">--hostname myRabbit \</span><br><span class="line">--name rabbitmq \</span><br><span class="line">rabbitmq</span><br></pre></td></tr></table></figure><p>启动成功后浏览器输入 http://部署RabbitMq机器的IP地址:15672,即可成功访问控制台。</p><p><img src="../%E5%9F%BA%E4%BA%8ESpringAOP%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0MQ%E5%B9%82%E7%AD%89.assets/iShot_2023-04-02_17.45.07.png" alt="iShot_2023-04-02_17.45.07"></p><h3 id="基于Java代码整合RabbitMq"><a href="#基于Java代码整合RabbitMq" class="headerlink" title="基于Java代码整合RabbitMq"></a>基于Java代码整合RabbitMq</h3><p>由于在不采用框架的情况下整合RabbitMq会过于繁琐，所以采用最主流的方式通过SpringBoot进行整合。<code>完整Demo地址</code>。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/sheng_yu_lu/springboot-rabbitmq-demo.git</span><br></pre></td></tr></table></figure><p>SpringBoot技术整合RabbitMq必须先进行配置，首先进行properties配置（yml文件也可以达到同样目的，关键看个人习惯）。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">8089</span></span><br><span class="line"><span class="attr">spring.application.name</span>=<span class="string">publisher</span></span><br><span class="line"><span class="comment"># ==========================rabbitmq相关配置==========================</span></span><br><span class="line"><span class="comment"># rabbitmq 地址</span></span><br><span class="line"><span class="attr">spring.rabbitmq.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># rabbitmq api 操作端口</span></span><br><span class="line"><span class="attr">spring.rabbitmq.port</span>=<span class="string">5672</span></span><br><span class="line"><span class="comment"># rabbitmq 账号</span></span><br><span class="line"><span class="attr">spring.rabbitmq.username</span>=<span class="string">test</span></span><br><span class="line"><span class="comment"># rabbitmq 密码</span></span><br><span class="line"><span class="attr">spring.rabbitmq.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># rabbitmq 虚拟机名称</span></span><br><span class="line"><span class="attr">spring.rabbitmq.virtual-host</span>=<span class="string">/</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ==========================redis相关配置==========================</span></span><br><span class="line"><span class="comment"># Redis本地服务器地址，注意要开启redis服务 redis-server</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器端口</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码默认为空 若有设置则必填</span></span><br><span class="line"><span class="attr">spring.redis.password</span>=<span class="string"></span></span><br><span class="line"><span class="comment"># 连接池最大连接数，若为负责则表示没有任何限制</span></span><br><span class="line"><span class="attr">spring.redis.jedis.pool.max-active</span>=<span class="string">8</span></span><br><span class="line"><span class="comment"># 连接池最大阻塞等待时间，若为负责则表示没有任何限制</span></span><br><span class="line"><span class="attr">spring.redis.jedis.pool.max-wait</span>=<span class="string">-1</span></span><br><span class="line"><span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line"><span class="attr">spring.redis.jedis.pool.max-idle</span>=<span class="string">8</span></span><br></pre></td></tr></table></figure><p>注意 RabbitMq默认访问端口为 <code>15672</code>，但是API操作端口却是<code>5672</code>。<code>rabbitmq虚拟机名称</code> spring.rabbitmq.virtual-host必须设置成自己的，可在RabbitMq控制台admin 页面查看。</p><p><img src="../%E5%9F%BA%E4%BA%8ESpringAOP%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0MQ%E5%B9%82%E7%AD%89.assets/iShot_2023-04-02_20.55.59.png" alt="iShot_2023-04-02_20.55.59"></p><p>由于后期需要借助Redis来保证幂等，所以可以将RabbitMq配置和Redis配置视为<code>公共配置</code>。可以在公共模块的resources目录下创建<code>config</code>目录并在目录中创建名称为<code>application.properties</code>的配置文件用于配置<code>公共配置</code>信息。当SpringBoot启动时会优先加载<code>config</code>目录再加载对应启动模块下的配置文件。</p><p>注意：当需要进行<code>多环境开发</code>时，<code>config</code>目录下的配置文件不能通过Maven的方式指定对应环境，因为config目录会被优先加载。所以当需要多环境开发只能通过在config目录下的主配置文件中用如下方式指定环境。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>= <span class="string">xxx # 环境名称xxx （application-xxx.properties）</span></span><br></pre></td></tr></table></figure><p>在进行完配置文件配置后，还需要进行Java配置类编写，主要目的是将<code>队列</code>、<code>交换机</code>进行初始化以及整合<code>路由</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.DirectExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.constant.MqConstant.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rabbitMq配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义队列 命名：testDirectQueue</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">queue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(QUEUE_NAME, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义交换机 命名：testDirectExchange</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    DirectExchange <span class="title function_">directExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectExchange</span>(EXCHANGE_NAME, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列到交换机 并设置用于匹配键：testRouting</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    Binding <span class="title function_">bindingDirect</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(queue()).to(directExchange()).with(ROUTING_KEY_NAME);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于在通过SpringAmqp提供的API操作消息发送需要指定<code>交换机</code>以及<code>路由</code>,在监听RabbitMq的消费端<code>@RabbitListener注解</code>需要指定<code>队列名称</code>。所以将RabbitMq配置类中的常用常量，抽象封装到常量类中达到方便使用的目的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * rabbitMq常量类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 交换机名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EXCHANGE_NAME</span> <span class="operator">=</span> <span class="string">&quot;testDirectExchange&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 队列名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">QUEUE_NAME</span> <span class="operator">=</span> <span class="string">&quot;testQueue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 路由名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ROUTING_KEY_NAME</span> <span class="operator">=</span> <span class="string">&quot;testRouting&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于将RabbitMq封装到了common公共模块下，对应的服务其实还无法操作RabbitMq。所以必须将RabbitMq配置加载到需要使用的服务，可以通过在启动类进行扫描方式达到目的，但是在企业级开发中这种方案并不可取。当项目集成的中间件过多时非常容易混乱，所以采用配置类扫描的方式进行装配。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载RabbitMq配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.example.config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@ComponentScan注解</code>只需要扫描到RabbitMq配置类所在的包即可，该配置类必须加上<code>@Configuration注解</code>才能装配到Spring容器中。</p><h3 id="定义消息报文格式"><a href="#定义消息报文格式" class="headerlink" title="定义消息报文格式"></a>定义消息报文格式</h3><p>由于RabbitMq官方推荐用法是用于发送字符串类型报文，但是在复杂业务场景下不同服务之间通常需要传递DTO(数据传递对象)。mq发送DTO的方式过于复杂且容易出错，站在开发角度看这种方式并不可取。所以为了方便操作RabbitMq发送报文以及切面处理必须定义统一的报文格式。</p><p>常见的报文格式有<code>XML</code>以及<code>Json</code>。由于通过Jsoup去解析XML方式操作相对复杂，并且XML形式报文代码量过大容易影响业务代码可读性。</p><p>采用Json格式报文则是一个比较简单实用的方案，由于阿里巴巴开源了<code>FastJson</code>，用于操作<code>对象</code>和<code>Json</code>转换非常简便。所以建议采用Json格式报文。</p><p>为了方便开发，定义一个用于封装传输报文信息的数据传递对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Builder;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息队列报文对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqMessageDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 报文唯一值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String uniqueKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Json形式报文数据 对象或字符串皆用Json形式传输</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String jsonData;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：由于需要采用fastJson进行对象与字符串相互转换，必须添加<code>构造方法</code>否则转换会报错。该对象只简单定义了两个属性，<code>uniqueKey</code>报文唯一值后期会用于幂等操作。可以采用<code>雪花算法</code>或<code>UUID</code>等方式生成唯一值。<code>jsonData </code> Json形式数据，可以是通过fastJson将对象转换而来的Json字符串。FastJson转换对象和字符串操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将对象转换为Json字符串</span></span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(object); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将Json字符串转换为对象</span></span><br><span class="line"><span class="type">TargetObject</span> <span class="variable">targetObject</span> <span class="operator">=</span> JSONObject.parseObject(json, TargetObject.class);</span><br></pre></td></tr></table></figure><p>消息发送端业务逻辑代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.example.dto.RabbitMqMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.service.SendService;</span><br><span class="line"><span class="keyword">import</span> com.example.utils.PubUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.core.RabbitTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.constant.MqConstant.EXCHANGE_NAME;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.constant.MqConstant.ROUTING_KEY_NAME;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息发送 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SendService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;来自发布者的消息&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">messageJson</span> <span class="operator">=</span> JSON.toJSONString(message);</span><br><span class="line">        log.info(<span class="string">&quot;消息报文message:&#123;&#125;&quot;</span>, messageJson);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装报文对象</span></span><br><span class="line">        <span class="type">RabbitMqMessageDTO</span> <span class="variable">rabbitMqMessageDTO</span> <span class="operator">=</span> RabbitMqMessageDTO.builder()</span><br><span class="line">                .uniqueKey(PubUtils.getUniqueKey())</span><br><span class="line">                <span class="comment">/// .uniqueKey(&quot;123456abc&quot;)</span></span><br><span class="line">                .jsonData(messageJson)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 报文对象转换为JSON</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> JSON.toJSONString(rabbitMqMessageDTO);</span><br><span class="line">        log.info(<span class="string">&quot;消息报文内容:&#123;&#125;&quot;</span>, data);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送消息</span></span><br><span class="line">        rabbitTemplate.convertAndSend(EXCHANGE_NAME, ROUTING_KEY_NAME, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消息消费端业务代码： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.example.annotations.MqIdempotent;</span><br><span class="line"><span class="keyword">import</span> com.example.constant.MqConstant;</span><br><span class="line"><span class="keyword">import</span> com.example.dto.RabbitMqMessageDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.service.ConsumerService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.rabbit.annotation.RabbitListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消息监听 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ConsumerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消费消息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息队列报文</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@MqIdempotent</span> <span class="comment">// 保证MQ幂等注解</span></span><br><span class="line">    <span class="meta">@RabbitListener(queues = MqConstant.QUEUE_NAME)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">linsten</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收消息 &quot;</span> + message);</span><br><span class="line">        <span class="comment">// 解析Json</span></span><br><span class="line">        <span class="type">RabbitMqMessageDTO</span> <span class="variable">rabbitMqMessageDTO</span> <span class="operator">=</span> JSONObject.parseObject(message, RabbitMqMessageDTO.class);</span><br><span class="line">        System.out.println(rabbitMqMessageDTO);</span><br><span class="line">        <span class="comment">// 获取报文json</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonData</span> <span class="operator">=</span> rabbitMqMessageDTO.getJsonData();</span><br><span class="line">        System.out.println(<span class="string">&quot;报文信息 &quot;</span> + jsonData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="MQ幂等问题分析以及处理"><a href="#MQ幂等问题分析以及处理" class="headerlink" title="MQ幂等问题分析以及处理"></a>MQ幂等问题分析以及处理</h3><p>在处理幂等前必须搞清楚幂等的概念，即报文生产一次消费一次。但是为什么RabbitMq会存在不幂等的问题，必须了解中间件RabbitMq的运行机制——当消息提供端将报文发送到中间件RabbitMq后消息会进入队列中即<code>并行请求</code>转变为<code>串行请求</code>。但是当网络发生波动时RabbitMq会启用重试机制，会将队列中的同一份报文多次投递到消费端，结果将会造成一次发送多次消费的不幂等问题发生。</p><p>为解决上述问题，直接在业务代码中处理很不明智。虽然RabbitMq存在多种保证幂等的解决方案，但是大多数方案都是站在不考虑未来技术升级的基础上处理的，如果当系统的承载能力达到极限时恰好有更完美的消息中间件可以取代RabbitMq那么将不得不考虑重构。所以建议采用自定义注解+SpringAop切面整合Redis的方式以最大限度的降低对业务代码的侵入来保证幂等。</p><h3 id="自定义注解以及Aop切面实施方案"><a href="#自定义注解以及Aop切面实施方案" class="headerlink" title="自定义注解以及Aop切面实施方案"></a>自定义注解以及Aop切面实施方案</h3><p>AOP：使用Java语言来实现增强对象与切面的应用 (出自《Spring技术内幕》) 最常见三种处理方式</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@Bfore前置处理在方法执行前进行处理</span><br><span class="line">@After后置处理在方法执后前进行处理</span><br><span class="line">@Around环绕处理方法执行前处理在方法执行完后再进行处理</span><br></pre></td></tr></table></figure><p>由于已经在封装统一报文对象时设置了<code>唯一值</code>属性，所以可以在切面中通过唯一值进行判断该报文是否为重复投递报文。具体实施思路：</p><p><img src="../%E5%9F%BA%E4%BA%8ESpringAOP%E5%B0%81%E8%A3%85%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0MQ%E5%B9%82%E7%AD%89.assets/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt="未命名文件"></p><p>由上述分析，采用自定义注解和SpringAop的环绕处理刚好符合。自定义注解代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.annotations;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mq幂等注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MqIdempotent &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Target注解</code>用于指定作用域，该注解作用在方法上。<code>@Retention注解</code>指定生效场景，该注解在运行时生效。</p><p>aop切面代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.example.dto.RabbitMqMessageDTO;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Mq幂等注解切面实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/4/1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MqIdempotentAop</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(com.example.annotations.MqIdempotent)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">point</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis存储mq报文唯一值键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">KEY</span> <span class="operator">=</span> <span class="string">&quot;mqUk&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕处理切入点方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 切点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(&quot;point()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">around</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uniqueKey</span> <span class="operator">=</span> dealData(proceedingJoinPoint);</span><br><span class="line">        log.info(<span class="string">&quot;报文唯一值 :&#123;&#125;&quot;</span>, uniqueKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 读取redis值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(KEY + uniqueKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 存在相同的value则不执行注解标注方法</span></span><br><span class="line">            log.info(<span class="string">&quot;存在重复投递，目标方法不执行，重复投递报文唯一值 :&#123;&#125;&quot;</span>, uniqueKey);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 执行注解标注方法</span></span><br><span class="line">            executeMethod(proceedingJoinPoint);</span><br><span class="line">            <span class="comment">// 数据写入redis</span></span><br><span class="line">            redisTemplate.opsForValue().set(KEY + uniqueKey, uniqueKey);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 切点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">dealData</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求参数</span></span><br><span class="line">        Object[] args = proceedingJoinPoint.getArgs();</span><br><span class="line">        log.info(<span class="string">&quot;参数 :&#123;&#125;&quot;</span>, args);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> Arrays.toString(args);</span><br><span class="line">        param = param.substring(<span class="number">0</span>, param.length() - <span class="number">1</span>);</span><br><span class="line">        param = param.substring(<span class="number">1</span>);</span><br><span class="line">        <span class="type">RabbitMqMessageDTO</span> <span class="variable">rabbitMqMessageDTO</span> <span class="operator">=</span> JSONObject.parseObject(param, RabbitMqMessageDTO.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">uniqueKey</span> <span class="operator">=</span> rabbitMqMessageDTO.getUniqueKey();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (uniqueKey == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(uniqueKey)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;参数异常 mq唯一值不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uniqueKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行注解标注方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proceedingJoinPoint 切点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">executeMethod</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            proceedingJoinPoint.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码中定义的切入点  @Pointcut(“@annotation(com.example.annotations.MqIdempotent)”)必须指定自定义注解才能生效注意<code>不能只指定到包必须指定到类名称</code>。</p><p><code>@Around</code>注解参数中必须定义切入点方法。至于怎样确定读取以及校验的操作在自定义注解标注的方法前执行，则必须了解<code>ProceedingJoinPoint</code> 常用API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取参数</span></span><br><span class="line">proceedingJoinPoint.getArgs(); </span><br><span class="line"><span class="comment">// 获取方法对象</span></span><br><span class="line">(MethodSignature) joinPoint.getSignature();</span><br><span class="line"><span class="comment">// 执行切面增强方法</span></span><br><span class="line">proceedingJoinPoint.proceed();</span><br></pre></td></tr></table></figure><p>如果所有的监听类以及监听方法都在一个包下，那么将不需要自定义注解，只需要封装AOP切面通过切入点进行包扫描即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 定义切入点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(xxx包路径&quot;)</span></span><br><span class="line"><span class="meta">public void point() &#123;</span></span><br><span class="line"><span class="meta">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="调试验证"><a href="#调试验证" class="headerlink" title="调试验证"></a>调试验证</h3><p>由于整合了Redis所以启动前还必须启动Redis，启动命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br></pre></td></tr></table></figure><p>虽然重复多次尝试可以复现RabbitMq不幂等的问题，但是为了方便调试所以选择使用假数据的方式进行，即将报文唯一值写死采用固定数据多次发送模拟RabbitMq重试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装报文对象</span></span><br><span class="line"><span class="type">RabbitMqMessageDTO</span> <span class="variable">rabbitMqMessageDTO</span> <span class="operator">=</span> RabbitMqMessageDTO.builder()</span><br><span class="line">        <span class="comment">/// .uniqueKey(PubUtils.getUniqueKey()) 注掉UUID生成的唯一值，使用固定假数据代替唯一值模拟重复投递</span></span><br><span class="line">        .uniqueKey(<span class="string">&quot;12345678abc&quot;</span>)</span><br><span class="line">        .jsonData(messageJson)</span><br><span class="line">        .build();</span><br></pre></td></tr></table></figure><p><a href="https://imgse.com/i/pp54pdS"><img src="https://s1.ax1x.com/2023/04/05/pp54pdS.png" alt="pp54pdS.png"></a></p><p><a href="https://imgse.com/i/pp54FRs"><img src="https://s1.ax1x.com/2023/04/05/pp54FRs.png" alt="pp54FRs.png"></a></p><p>第一次投递，校验通过消息消费端能够收到报文。</p><p><a href="https://imgse.com/i/pp5hxqf"><img src="https://s1.ax1x.com/2023/04/05/pp5hxqf.png" alt="pp5hxqf.png"></a></p><p>RabbitMq重试，校验阻断，不再执行注解 <code>@MqIdempotent</code>标注的方法。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓手机改造成服务器</title>
      <link href="/posts/38199.html"/>
      <url>/posts/38199.html</url>
      
        <content type="html"><![CDATA[<h1 id="安卓手机改造成服务器"><a href="#安卓手机改造成服务器" class="headerlink" title="安卓手机改造成服务器"></a>安卓手机改造成服务器</h1><h3 id="adb简介"><a href="#adb简介" class="headerlink" title="adb简介"></a>adb简介</h3><p>手机更新换代越来越快，通常两年或者一年就会更换一次手机。替换下来的安卓手机直接扔掉或者留着积灰都过于浪费，安卓手机底层是基于Linux系统打造而来，虽然Linux不是安卓，但是安卓天生就是Linux。在<code>云原生</code>和<code>devops</code>的大趋势下普通程序员不得不高度掌握Linux命令，所以将废旧的安卓手机拿来当做Linux服务器是最佳选择。</p><p>但是直接通过数据线将安卓手机连接电脑，却只能访问安卓手机的普通文件系统并不能直接操作底层的Linux指令。这个时候必须采用安卓官方推荐的方式<code>adb</code>一款专门用于安卓手机底层程序写入、调试的工具，是一种功能多样的命令行工具。adb 命令可用于执行各种设备操作，并提供对 Unix shell（可用来在设备上运行各种命令）的访问权限。可直接通过 <code>adb</code>的方式操作安卓底层的Linux命令。<code>官方链接</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://developer.android.google.cn/studio/command-line/adb</span><br></pre></td></tr></table></figure><h3 id="adb环境安装"><a href="#adb环境安装" class="headerlink" title="adb环境安装"></a>adb环境安装</h3><p>下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.androiddevtools.cn</span><br></pre></td></tr></table></figure><p>将platform-tools的压缩包下载下来之后，解压到本地磁盘，<code>不能有中文路径</code>。复制目录找到系统环境变量设置。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/2490825-20220330104306707-1368414933.png" alt="2490825-20220330104306707-1368414933"></p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/2490825-20220330104618338-596596993.png" alt="2490825-20220330104618338-596596993"></p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/2490825-20220330104712728-1867621608.png" alt="2490825-20220330104712728-1867621608"></p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/2490825-20220330105236409-1940438629.png" alt="2490825-20220330105236409-1940438629"></p><p>完成<code>adb</code>环境变量设置后，win+R打开搜索框，输入<code>cmd</code>打开命令行。执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb --version</span><br></pre></td></tr></table></figure><p>能够输出adb版本则说明环境配置成功，若无法输出adb版本信息则必须复盘上述过程，不同品牌电脑硬件存在差异可尝试关机重启。</p><h3 id="adb连接安卓手机"><a href="#adb连接安卓手机" class="headerlink" title="adb连接安卓手机"></a>adb连接安卓手机</h3><p>将安卓手机和电脑连接后，必须将开发者模式设置为开启。部分手机设置中没有开发者选项，可在通过数据线连接电脑弹出USB选项时选择传输文件</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5431670245558_.pic.jpg" alt="5431670245558_.pic"></p><p>在电脑终端执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>正常情况下会列出设备信息。如果只出现 <code>List of devices attached</code>这一行信息，则表示设备未被电脑识别，必须再进行处理。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5291670234989_.pic.jpg" alt="5291670234989_.pic"></p><h3 id="adb无法连接设备处理方案"><a href="#adb无法连接设备处理方案" class="headerlink" title="adb无法连接设备处理方案"></a>adb无法连接设备处理方案</h3><p>打开电脑管理菜单，找到设备管理器一栏，打开便携设备。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5301670234988_.pic.jpg" alt="5301670234988_.pic"></p><p>如果这一栏出现黄色感叹号，必须先右键更新驱动。正常则可直接右键打开属性、详细信息找到下拉框选择硬件Id。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5311670234989_.pic.jpg" alt="5311670234989_.pic"></p><p>将设备<code>VID</code>单独处理。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5321670234990_.pic.jpg" alt="5321670234990_.pic"></p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5341670234996_.pic.jpg" alt="5341670234996_.pic"></p><p>用记事本记录 0x 后半段为 VID。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x对应的VID信息</span><br></pre></td></tr></table></figure><p>而后将记事本保存重命名为<code>adb_usb.ini</code>文件，放置于adb的安装目录下。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5331670234995_.pic.jpg" alt="5331670234995_.pic"></p><p>打开 Android Studio 新建项目。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5391670235006_.pic.jpg" alt="5391670235006_.pic"></p><p>项目创建完成后，选择真机调试。在设备加载成功后则可保证安卓手机与电脑正式建立连接。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5361670234998_.pic.jpg" alt="5361670234998_.pic"></p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5381670235006_.pic.jpg" alt="5381670235006_.pic"></p><p>当设备与android studio成功连接后，再执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb devices</span><br></pre></td></tr></table></figure><p>当出现后缀带有 devices 的列表项时则表明已成功连接安卓手机底层的 Linux 内核。执行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb shell</span><br></pre></td></tr></table></figure><p>可以直接进入安卓手机的Linux内核中操作Linux命令。</p><p><img src="../%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E6%94%B9%E9%80%A0%E6%88%90%E6%9C%8D%E5%8A%A1%E5%99%A8.assets/5451670246961_.pic.jpg" alt="5451670246961_.pic"></p><p>如果需要完全将其当做个人服务器使用，可在内部安装运行内网穿透软件。推荐采用免费开源跨平台轻量级内网穿透工具 ，下载地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/LiangXiaoWei1024/net-penetrate-http-and-https-simple/releases</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>文件服务环境搭建与使用</title>
      <link href="/posts/38190.html"/>
      <url>/posts/38190.html</url>
      
        <content type="html"><![CDATA[<h1 id="文件服务环境搭建与使用"><a href="#文件服务环境搭建与使用" class="headerlink" title="文件服务环境搭建与使用"></a>文件服务环境搭建与使用</h1><h3 id="技术对比"><a href="#技术对比" class="headerlink" title="技术对比"></a>技术对比</h3><p>市场上文件服务器很多，最为流行的当属阿里巴巴推出的<code>OSS</code>对象存储服务。其次当属华为推出的<code>OBS</code>对象存储服务。两者各有优缺点。</p><h5 id="阿里OSS对象存储服务"><a href="#阿里OSS对象存储服务" class="headerlink" title="阿里OSS对象存储服务"></a>阿里OSS对象存储服务</h5><p>优点：</p><p>能够完美的适配SpringCloudAlibaba系列组件以及中间件。</p><p>稳定可靠且性能强大，适合用于互联网产品高并发场景。</p><p>缺点：</p><p>价格相对昂贵</p><h5 id="华为OBS对象存储服务"><a href="#华为OBS对象存储服务" class="headerlink" title="华为OBS对象存储服务"></a>华为OBS对象存储服务</h5><p>优点：</p><p>稳定可靠，可以完美适配华为云系列云服务产品。</p><p>价格相对于低廉。</p><p>缺点：</p><p>不适合用于互联网产品高并发场景。</p><h3 id="minio对象存储服务"><a href="#minio对象存储服务" class="headerlink" title="minio对象存储服务"></a>minio对象存储服务</h3><p>然而在<code>TOB</code>领域的项目中请求的并发量通常不会太大，以上介绍的两种存储服务都不太适合，既存在性能过剩资金浪费的问题。<code>minio</code>则是一款分布式开源且<code>完全免费</code>的对象存储服务，非常适合用于<code>TOB</code>领域内网部署且并发量低的项目。</p><h3 id="minio环境搭建"><a href="#minio环境搭建" class="headerlink" title="minio环境搭建"></a>minio环境搭建</h3><p>为了避免不同电脑系统以及型号带来的差异，本次采用<code>docker</code>虚拟容器搭建<code>minio</code>，首先拉取docker镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull minio/minio</span><br></pre></td></tr></table></figure><p>在镜像拉取的同时，找个目录创建文件夹<code>minio</code>用于存放配置以及数据，注意：<code>不能有中文路径</code>。</p><p>在<code>minio</code>文件夹下创建连个子文件夹 <code>data</code> 用于存放数据 <code>config</code>用于存放配置，如图下所示。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/b.png" alt="b"></p><p>在docker镜像拉取完成后运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/a.pic.jpg" alt="a.pic"></p><p>查看<code>minio</code>镜像是否拉取成功，若不成功则必须重复执行上述拉取镜像步骤。</p><p>编写docker命令启动minio容器，注意：<code>账号、密码、data目录以及config目录必须设置成自己的</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 9091:9091 \</span><br><span class="line">--name=minio \ </span><br><span class="line">--restart=always \ </span><br><span class="line">-e &quot;MINIO_ACCESS_KEY=账号&quot; \ </span><br><span class="line">-e &quot;MINIO_SECRET_KEY=密码&quot; \ </span><br><span class="line">-v minio的data目录:/data \ </span><br><span class="line">-v minio的config目录:/root/.minio \  </span><br><span class="line">minio/minio server \ </span><br><span class="line">/data --console-address &quot;:9091&quot; --address &quot;:9000&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>运行完上述命令后执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps </span><br></pre></td></tr></table></figure><p>检查 minio容器是否启动成功。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/c.pic.jpg" alt="4841668490996_.pic"></p><p>浏览器输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://127.0.0.1:9091</span><br></pre></td></tr></table></figure><p>则可打开minio界面，登录账号和密码则是在启动docker容器时设置的账号密码</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/d.png" alt="iShot2022-11-15 13.45.59"></p><h3 id="minio-存储服务使用"><a href="#minio-存储服务使用" class="headerlink" title="minio 存储服务使用"></a>minio 存储服务使用</h3><p>登录minio后先创建用户</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/e.png" alt="Snipaste_2022-11-15_14-34-14"></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/f.png" alt="image-20221115144702260"></p><p>创建分组并选择用户。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/g.png" alt="Snipaste_2022-11-15_14-58-19"></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/h.png" alt="h"></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/i.png" alt="i"></p><p>下载按键点击后会下载一个JSON，<code>必须先保留，开发阶段需要用到</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;url&quot;</span><span class="punctuation">:</span><span class="string">&quot;http://192.168.124.132:9000&quot;</span><span class="punctuation">,</span><span class="attr">&quot;accessKey&quot;</span><span class="punctuation">:</span><span class="string">&quot;13R78M8EW7ZEE1N27024&quot;</span><span class="punctuation">,</span><span class="attr">&quot;secretKey&quot;</span><span class="punctuation">:</span><span class="string">&quot;3WRFZZw6lmPI5XjlT3sp2TW3N80rF3n5sEDUEVdo&quot;</span><span class="punctuation">,</span><span class="attr">&quot;api&quot;</span><span class="punctuation">:</span><span class="string">&quot;s3v4&quot;</span><span class="punctuation">,</span><span class="attr">&quot;path&quot;</span><span class="punctuation">:</span><span class="string">&quot;auto&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>最后进行文件桶（文件存储单元）创建，桶名称可以自定义。注意：<code>不要用中文命名</code></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/j.png" alt="j"></p><p>点击browse可以浏览桶中的文件信息，可以在界面上操作文件上传下载以及删除。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/k.png" alt="k"></p><h3 id="Java代码操作-minio"><a href="#Java代码操作-minio" class="headerlink" title="Java代码操作 minio"></a>Java代码操作 minio</h3><p>站在产品的角度，仅仅只通过minio服务器的可视化界面操作是无法满足用户需求的。必须通过程序实现优化操作。</p><p><code>完整demo地址</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/sheng_yu_lu/minio-demo.git</span><br></pre></td></tr></table></figure><p>yml 文件配置：该文件上传接收对象采用Spring社区提供的 <code>MultipartFile</code>来接收文件。但是默认情况下该类支持的上传下载只支持<code>1MB</code>，所以必须设置文件上传大小为无限大。<code>minio</code>的相关配置 <code>access_key</code>和<code>secret_key</code>则是来源于上文提到的通过minio服务下载的 <code>JSON</code>文件。由于文件桶<code>bucket</code> 在实际项目开发过程中开发环境会与生产环境存在差异，所以也将其配置到yml文件中。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用服务 WEB 访问端口</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8087</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用名称</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">minio-demo</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># 采用P6sy监控数据库    </span></span><br><span class="line">    <span class="comment"># url: jdbc:p6spy:mysql://localhost:3306/just_do_it</span></span><br><span class="line">    <span class="comment"># driver-class-name: com.p6spy.engine.spy.P6SpyDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/just_do_it</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 设置文件上传大小为无限大 (默认上传大小 1MB)</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="number">-1</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="number">-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis 相关配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/*.xml</span> <span class="comment">#配置文件存放位置</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.miniodemo.pojo.domain</span> <span class="comment">#实体类存放位置</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus配置控制台打印SQL语句</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">ROOT:</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">com.example.miniodemo:</span> <span class="string">debug</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># minio 相关配置</span></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="comment"># 服务地址 (必须用API地址)</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">http://127.0.0.1:9000</span></span><br><span class="line">  <span class="comment"># 服务存取码</span></span><br><span class="line">  <span class="attr">access_key:</span> <span class="string">13R78M8EW7ZEE1N27024</span></span><br><span class="line">  <span class="comment"># 服务私钥</span></span><br><span class="line">  <span class="attr">secret_key:</span> <span class="string">3WRFZZw6lmPI5XjlT3sp2TW3N80rF3n5sEDUEVdo</span></span><br><span class="line">  <span class="comment"># 文件桶</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">public</span></span><br><span class="line">  <span class="comment"># 文件默认下载路径 (当前端传递的文件下载路径为空时，采用该下载路径)</span></span><br><span class="line">  <span class="attr">filePath:</span> <span class="string">/Users/apple/Downloads/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：由于前文配置minio时存在两个端口，<code>其中只有一个是专门用于程序API操作的端口</code>，打开docker可视化界面可知。所以在yml文件中配置端口，<code>必须选在minio服务的9000端口</code></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/l.png" alt="iShot2022-11-10 22.13.51"></p><h3 id="Java操作上传下载API封装"><a href="#Java操作上传下载API封装" class="headerlink" title="Java操作上传下载API封装"></a>Java操作上传下载API封装</h3><p><code>minio </code>官网提供了Java操作的示例。 地址：<code>https://min.io/docs/minio/linux/developers/java/minio-java.html?ref=docs-redirect</code>。但该方案过于陈旧繁琐，网上能够找到的方案大多过于老套且不实用。所以需要对其用主流的Spring系列技术进行封装。</p><p>由于上文已提供完整demo案例，所以只指出部分Maven坐标引入时所需要注意的点，当前minio Java api 版本已经更新到8系列，然而okhttp 小于 4.8.1 则会导致 minio客户端对象创建失败，<code>所以需要引入大于4.8.1版本okhttp依赖并在minio依赖中排除okhttp坐标解决maven依赖冲突才能正常使用官方推荐的minio 8.4.5 版Maven依赖</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- okhttp 小于 4.8.1 则会导致 minio客户端对象创建失败 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 排除maven冲突 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>minio客户端封装</code>采用spring框架<code>@Configuration</code> 注解声明该类为配置类，用<code>@Bean</code>注解将配置方法实例化的对象放入Spring容器中，当springboot项目启动类运行时则会直接<code>以单例模式</code>实例化，所有注册调用该实例的方法拿到的都会是<code>同一个minioClient对象</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.common.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * minio 配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio 服务地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String minioUrl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio 服务存取码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.access_key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio 服务私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secret_key&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化 minio 连接对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">initMinioClient</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(minioUrl)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>文件上传下载封装</code>根据官方文档的方式，结合Spring框架对其进行封装。</p><p>针对文件上传操作为了方便<code>前后端对接调试</code>，在异常处理上封装了一层全局通用异常处理<code>BusinessException.exception(ResultEnum.UPLOAD_ERROR);</code>既后端异常在控制台打印的同时可以在前端页面上显示，<code>方便开发人员在第一时间定位代码问题</code>，站在产品的角度思考问题，<code>必须配合前端页面显示</code>上传文件操作成功后需要获取到文件的<code>Url</code>地址。前端开发人员是需要通过拿到文件的url地址才能让文件在界面上显示变得可行。为了方便调试<code>快速定位问题</code>以及保证程序<code>健壮性</code>，获取url地址后通过<code>断言</code>的方式保证程序健壮<code>AssertUtils.notEmpty(url, ResultEnum.URL_GET_ERROR);</code>语义：断言该字符串不为空，否则抛出业务异常（获取url失败）阻断程序。</p><p>针对文件下载，采用官方提供的方案整合Spring框架封装，用文件名称和文件桶（文件在minio服务中存储的位置）定位需要下载的文件，通过前端传递的文件名称以及下载路径进行下载。为了方便前后端开发调试同样使用了通用异常的处理方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.result.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.service.FileApi;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.util.AssertUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.util.PubUtils;</span><br><span class="line"><span class="keyword">import</span> io.minio.DownloadObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.GetPresignedObjectUrlArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.PutObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.http.Method;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文件上传 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileApiImpl</span> <span class="keyword">implements</span> <span class="title class_">FileApi</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * minio 文件桶</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucket&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucket;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile 文件对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadFile</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isNull(multipartFile) || PubUtils.isEmpty(multipartFile.getOriginalFilename())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 构造文件上传对象</span></span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">putObjectArgs</span> <span class="operator">=</span> PutObjectArgs.builder()</span><br><span class="line">                    .bucket(bucket)</span><br><span class="line">                    .object(multipartFile.getOriginalFilename())</span><br><span class="line">                    .stream(multipartFile.getInputStream(), multipartFile.getSize(), -<span class="number">1</span>)</span><br><span class="line">                    .contentType(multipartFile.getContentType())</span><br><span class="line">                    .build();</span><br><span class="line">            <span class="comment">// 上传文件</span></span><br><span class="line">            minioClient.putObject(putObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            BusinessException.exception(ResultEnum.UPLOAD_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回文件路径</span></span><br><span class="line">        <span class="keyword">return</span> getUrl(multipartFile.getOriginalFilename());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文件url路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getUrl</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            url = minioClient.getPresignedObjectUrl(GetPresignedObjectUrlArgs.builder()</span><br><span class="line">                    .method(Method.GET)</span><br><span class="line">                    .bucket(bucket)</span><br><span class="line">                    .object(fileName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            BusinessException.exception(ResultEnum.PARAM_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">        AssertUtils.notEmpty(url, ResultEnum.URL_GET_ERROR);</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件默认下载路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.filePath&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String filePath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName         文件名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileDownloadPath 文件下载路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String fileName, String fileDownloadPath)</span> &#123;</span><br><span class="line">        <span class="comment">// 当前端传递的下载路径为空则采用默认下载路径</span></span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(fileDownloadPath)) &#123;</span><br><span class="line">            fileDownloadPath = filePath;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">DownloadObjectArgs</span> <span class="variable">downloadObjectArgs</span> <span class="operator">=</span> DownloadObjectArgs.builder()</span><br><span class="line">                    .bucket(bucket)</span><br><span class="line">                    .object(fileName)</span><br><span class="line">                    .filename(fileDownloadPath + fileName)</span><br><span class="line">                    .build();</span><br><span class="line">            minioClient.downloadObject(downloadObjectArgs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            BusinessException.exception(ResultEnum.PARAM_INVALID);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务层封装"><a href="#业务层封装" class="headerlink" title="业务层封装"></a>业务层封装</h3><p>上述api封装处理方案仅仅只是针对于文件的操作，其实依然存在无法适应业务功能开发可行性的问题。例如：<code>当文件上传成功后url地址获取失败则会造成minio服务空间资源的浪费</code>。又比如<code>pdf、word、m3u8这类文件在部分app或者浏览器上普通用户无法直接在页面上下载</code>，必须通过点击对应的下载按钮才能下载，然而仅仅只这样封装前端很难做到准确的获取文件名称来调用后端的接口下载。</p><p>所以为了规避此类问题必须再进行一层<code>业务上的封装</code>，通过创建一张系统文件表来存储文件相关信息，因为没有整合权限框架所以只设置了除了id外 <code>url  、file_name</code>两个文件相关的字段。在涉及到需要存储文件的模块，仅仅只设置<code>file_id</code>字段，通过存储系统文件表id的方式与文件关联。具体操作如下。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.result.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.service.FileApi;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.util.AssertUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.util.PubUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.domain.SystemFile;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.mapper.SystemFileMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.service.SystemFileService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统文件 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemFileServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;SystemFileMapper, SystemFile&gt; <span class="keyword">implements</span> <span class="title class_">SystemFileService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemFileMapper systemFileMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileApi fileApi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件并写入数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">upload</span><span class="params">(MultipartFile multipartFile)</span> &#123;</span><br><span class="line">        <span class="comment">// 当文件为空 不做持久化 返回空</span></span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isNull(multipartFile) || PubUtils.isEmpty(multipartFile.getName())) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上传文件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileUrl</span> <span class="operator">=</span> fileApi.uploadFile(multipartFile);</span><br><span class="line">        <span class="comment">// 持久化数据</span></span><br><span class="line">        <span class="type">SystemFile</span> <span class="variable">systemFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SystemFile</span>();</span><br><span class="line">        systemFile.setFileName(multipartFile.getOriginalFilename());</span><br><span class="line">        systemFile.setFileUrl(fileUrl);</span><br><span class="line">        log.info(multipartFile.getOriginalFilename());</span><br><span class="line">        systemFileMapper.insert(systemFile);</span><br><span class="line">        <span class="keyword">return</span> systemFile.getId();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过系统文件id获取文件信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 系统文件id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> SystemFile <span class="title function_">get</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="type">SystemFile</span> <span class="variable">systemFile</span> <span class="operator">=</span> systemFileMapper.selectById(id);</span><br><span class="line">        AssertUtils.notNull(systemFile, ResultEnum.DATA_NOT_EXIST);</span><br><span class="line">        <span class="keyword">return</span> systemFile;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当对应的业务表操作添加和修改，需要涉及文件操作时仅仅只需要调用对应的interface即可。在springCloudAlibaba项目中可将其提升为feign或者dubbo接口方便调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.common.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.domain.SystemFile;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统文件 业务逻辑层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SystemFileService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;SystemFile&gt; &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传单个文件并写入数据库</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile 上传文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Integer <span class="title function_">upload</span><span class="params">(MultipartFile multipartFile)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过系统文件id获取文件信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 系统文件id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SystemFile <span class="title function_">get</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>涉及文件操作的业务表接口开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.commondto.file.FileDownloadDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.dto.ArticleAddOrEditDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.dto.ArticleListDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章表 前端控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/article&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleService articleService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleAddOrEditDTO 文章添加对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; add(<span class="meta">@Validated</span> ArticleAddOrEditDTO articleAddOrEditDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.add(articleAddOrEditDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleListDTO 文章查询对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; list(<span class="meta">@RequestBody</span> ArticleListDTO articleListDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.list(articleListDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文章信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id                  文章id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleAddOrEditDTO 文章修改对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; edit(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id, <span class="meta">@Validated</span> ArticleAddOrEditDTO articleAddOrEditDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.edit(id, articleAddOrEditDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文章详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 文章id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; get(<span class="meta">@PathVariable(&quot;id&quot;)</span> Integer id) &#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileDownloadDTO 文件下载数据传输对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; download(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> FileDownloadDTO fileDownloadDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> articleService.download(fileDownloadDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上传单个文件，数据传递对象统一采用spring提供的<code>MultipartFile</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.pojo.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章添加或修改对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleAddOrEditDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String articleTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String articleContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章作者名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String articleAuthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> MultipartFile multipartFile;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了方便文件下载处理方便，统一封装文件下载数据传输类。只需要前端获取对应的id并传输下载路径集合调用后端接口进行文件下载。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.common.commondto.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用文件下载数据传输对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileDownloadDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 与文件相关的业务模块数据表对应数据的id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="keyword">private</span> String businessId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件下载路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileDownloadPath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>涉及文件上传下载模块操作具体业务代码如下,<code>文件上传获取URL并插入数据库后对应的业务表会插入或者更新file_id字段</code> 通过<code>事务机制</code>控制代码出现异常后回滚。<code>注意</code>：由于抛出过异常所以使用@Transactional()注解必须加入 <code>rollbackFor = Exception.class</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.commondto.file.FileDownloadDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.result.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.service.FileApi;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.service.SystemFileService;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.util.AssertUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.mapper.ArticleMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.domain.Article;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.domain.SystemFile;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.dto.ArticleAddOrEditDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.dto.ArticleListDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.pojo.vo.ArticleDetailResultVO;</span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.service.ArticleService;</span><br><span class="line"><span class="keyword">import</span> org.modelmapper.ModelMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;ArticleMapper, Article&gt; <span class="keyword">implements</span> <span class="title class_">ArticleService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ArticleMapper articleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ModelMapper modelMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SystemFileService systemFileService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleAddOrEditDTO 文章添加对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; add(ArticleAddOrEditDTO articleAddOrEditDTO) &#123;</span><br><span class="line">        <span class="comment">// 处理文件并获取文件id并做校验</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">fileId</span> <span class="operator">=</span> systemFileService.upload(articleAddOrEditDTO.getMultipartFile());</span><br><span class="line">        AssertUtils.notNull(fileId, ResultEnum.NOT_EXIST_FILE);</span><br><span class="line">        <span class="comment">// 持久化数据</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> modelMapper.map(articleAddOrEditDTO, Article.class);</span><br><span class="line">        article.setPublishTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        article.setFileId(fileId);</span><br><span class="line">        articleMapper.insert(article);</span><br><span class="line">        <span class="keyword">return</span> Result.success(article.getId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取文章详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 文章id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; get(Integer id) &#123;</span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> articleMapper.selectById(id);</span><br><span class="line">        AssertUtils.notNull(article, ResultEnum.DATA_NOT_EXIST);</span><br><span class="line">        <span class="comment">// 获取文件信息</span></span><br><span class="line">        <span class="type">SystemFile</span> <span class="variable">systemFile</span> <span class="operator">=</span> systemFileService.get(article.getFileId());</span><br><span class="line">        AssertUtils.notNull(systemFile, ResultEnum.DATA_ERROR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 封装返回数据</span></span><br><span class="line">        <span class="type">ArticleDetailResultVO</span> <span class="variable">articleDetailVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArticleDetailResultVO</span>();</span><br><span class="line">        articleDetailVO.setId(article.getId());</span><br><span class="line">        articleDetailVO.setArticleTitle(article.getArticleTitle());</span><br><span class="line">        articleDetailVO.setArticleContent(article.getArticleContent());</span><br><span class="line">        articleDetailVO.setArticleAuthor(article.getArticleAuthor());</span><br><span class="line">        articleDetailVO.setPublishTime(article.getPublishTime());</span><br><span class="line">        articleDetailVO.setFileId(article.getFileId());</span><br><span class="line">        articleDetailVO.setFileName(systemFile.getFileName());</span><br><span class="line">        articleDetailVO.setFileUrl(systemFile.getFileUrl());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Result.success(articleDetailVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询文章列表</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleListDTO 文章查询对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; list(ArticleListDTO articleListDTO) &#123;</span><br><span class="line">        IPage&lt;Article&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(articleListDTO.getPageNo(), articleListDTO.getPageSize());</span><br><span class="line">        IPage&lt;Article&gt; articlePage = articleMapper.selectByTitleAndAuthorAndPublishTime(page, articleListDTO.getArticleTitle(), articleListDTO</span><br><span class="line">                .getArticleAuthor(), articleListDTO.getMinPublishTime(), articleListDTO.getMaxPublishTime());</span><br><span class="line">        <span class="keyword">return</span> Result.success(articlePage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FileApi fileApi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文章</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileDownloadDTO 文件下载数据传输对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; download(FileDownloadDTO fileDownloadDTO) &#123;</span><br><span class="line">        <span class="comment">// 获取文件相关信息</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> articleMapper.selectById(fileDownloadDTO.getBusinessId());</span><br><span class="line">        AssertUtils.notNull(article, ResultEnum.DATA_NOT_EXIST);</span><br><span class="line">        <span class="type">SystemFile</span> <span class="variable">systemFile</span> <span class="operator">=</span> systemFileService.get(article.getFileId());</span><br><span class="line">        AssertUtils.notNull(systemFile, ResultEnum.DATA_ERROR);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下载操作</span></span><br><span class="line">        fileApi.download(systemFile.getFileName(), fileDownloadDTO.getFileDownloadPath());</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文章信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id                  文章id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> articleAddOrEditDTO 文章修改对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; edit(Integer id, ArticleAddOrEditDTO articleAddOrEditDTO) &#123;</span><br><span class="line">        <span class="comment">// 文件处理</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">fileId</span> <span class="operator">=</span> systemFileService.upload(articleAddOrEditDTO.getMultipartFile());</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> modelMapper.map(articleAddOrEditDTO, Article.class);</span><br><span class="line">        article.setId(id);</span><br><span class="line">        article.setFileId(fileId);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> articleMapper.updateById(article);</span><br><span class="line">        <span class="keyword">return</span> count &gt; <span class="number">0</span> ? Result.success(count) : Result.failed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要开发对应的文件预览接口前端可以通过直接获取 file_id 调用对应的系统文件接口即可。但也会存在某些功能需要点开对应模块的详情信息查看文件的需求。针对这类功能开发可以采用<code>VO</code>的方案实现，既 View  Object 视图对象。为方便这类需求快速开发，封装FileResultVO（通用文件视图对象）在编写对应模块的视图对象代码后只需要继承该类即可</p><p>FileResultVO 通用文件视图对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.common.commonvo.file;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用文件视图对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileResultVO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer fileId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件url路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String fileUrl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ArticleDetailResultVO 文章详情视图对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.miniodemo.pojo.vo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.miniodemo.common.commonvo.file.FileResultVO;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文章详情视图对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/11/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleDetailResultVO</span> <span class="keyword">extends</span> <span class="title class_">FileResultVO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章标题</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String articleTitle;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String articleContent;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文章作者名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String articleAuthor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date publishTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对应的详情接口具体实现逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取文章详情</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id 文章id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;?&gt; get(Integer id) &#123;</span><br><span class="line">    <span class="type">Article</span> <span class="variable">article</span> <span class="operator">=</span> articleMapper.selectById(id);</span><br><span class="line">    AssertUtils.notNull(article, ResultEnum.DATA_NOT_EXIST);</span><br><span class="line">    <span class="comment">// 获取文件信息</span></span><br><span class="line">    <span class="type">SystemFile</span> <span class="variable">systemFile</span> <span class="operator">=</span> systemFileService.get(article.getFileId());</span><br><span class="line">    AssertUtils.notNull(systemFile, ResultEnum.DATA_ERROR);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装返回数据</span></span><br><span class="line">    <span class="type">ArticleDetailResultVO</span> <span class="variable">articleDetailVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArticleDetailResultVO</span>();</span><br><span class="line">    articleDetailVO.setId(article.getId());</span><br><span class="line">    articleDetailVO.setArticleTitle(article.getArticleTitle());</span><br><span class="line">    articleDetailVO.setArticleContent(article.getArticleContent());</span><br><span class="line">    articleDetailVO.setArticleAuthor(article.getArticleAuthor());</span><br><span class="line">    articleDetailVO.setPublishTime(article.getPublishTime());</span><br><span class="line">    articleDetailVO.setFileId(article.getFileId());</span><br><span class="line">    articleDetailVO.setFileName(systemFile.getFileName());</span><br><span class="line">    articleDetailVO.setFileUrl(systemFile.getFileUrl());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Result.success(articleDetailVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口调试"><a href="#接口调试" class="headerlink" title="接口调试"></a>接口调试</h3><p>接口调试依然采用最主流的postman进行调试。</p><p>添加文章信息并上传文件，由于涉及到文件的上传必须采用UDP协议上传，postman对应的操作为form-data。点击如图所示的操作选择<code>file</code>并选择上传文件。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/m.png" alt="iShot2022-11-11 20.06.39"></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/n.png" alt="m"></p><p>获取详情测试</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/o.png" alt="Snipaste_2022-11-15_23-09-58"></p><p>点击详情中的<code>url</code>则可以在浏览器页面上查看文件信息。</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/image-20221115231549005.png" alt="image-20221115231549005"></p><p>下载文件测试</p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/send.png" alt="send"></p><p><img src="../%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E4%B8%8E%E4%BD%BF%E7%94%A8.assets/Snipaste.png" alt="Snipaste"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>控制台输出完整SQL日志方案</title>
      <link href="/posts/3.html"/>
      <url>/posts/3.html</url>
      
        <content type="html"><![CDATA[<h1 id="控制台输出完整SQL日志方案"><a href="#控制台输出完整SQL日志方案" class="headerlink" title="控制台输出完整SQL日志方案"></a>控制台输出完整SQL日志方案</h1><h3 id="SQL日志输出问题"><a href="#SQL日志输出问题" class="headerlink" title="SQL日志输出问题"></a>SQL日志输出问题</h3><p>在之前的一篇播客《Java工程师必须了解的高速开发方案》中提到过，可以采用 “Mybatis Log plugin”插件输出完整SQL。但是，这种方案局限性太大。仅仅只适用于IDEA这一款工具，对于很对Eclipse/MyEclipse用户不太友好。 还有一点局限在于只能在开发环境中通过这款插件查看SQL日志，项目一旦上线出现SQL未能及时同步等问题，排查将会非常麻烦。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>通过分析上述问题，可以考虑在控制台输出完整的SQL日志，并且可在配置文件中控制是否输出完整SQL日志的解决方案。使用P6spy来控制SQL日志输出则是一个非常适合的方案,官网地址“<a href="https://p6spy.readthedocs.io/en/latest/%E2%80%9D%E3%80%82">https://p6spy.readthedocs.io/en/latest/”。</a></p><p>直接上代码，mybatis版<code>完整demo地址</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/sheng_yu_lu/springboot-p6spy.git</span><br></pre></td></tr></table></figure><p>jpa版<code>完整demo地址</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/sheng_yu_lu/springboot-jpa-sql-log-demo.git</span><br></pre></td></tr></table></figure><h3 id="格式化处理方案"><a href="#格式化处理方案" class="headerlink" title="格式化处理方案"></a>格式化处理方案</h3><p>由于p6spy 默认打印SQL完整日志的格式不利于阅读，当SQL过于复杂时反而会导致SQL日志输出毫无意义。所以采用编写自定义格式化配置类的方案达到方便阅读的目的。</p><p><code>P6spy.properties</code>文件中设置 <code>自定义日志打印</code> 必须指定自定义格式化配置类路径。<code>日志输出到控制台</code>配置可以采用Mybatisplus提供的StdoutLogger类，底层源码为<code>System.err.println()</code>日志控制台中打印更方便阅读。在内网环境部署，可以不用修改该配置文件方便查看Linux运行日志。 如果需要部署在公网，则必须考虑<code>安全性</code>问题，建议先注释掉该文件保证控制台不会打印SQL日志再进行发布上线。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># P6Spy的配置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 应用的拦截模块</span></span><br><span class="line"><span class="attr">modulelist</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.MybatisPlusLogFactory,com.p6spy.engine.outage.P6OutageFactory</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义日志打印</span></span><br><span class="line"><span class="attr">logMessageFormat</span>=<span class="string">com.example.springbootp6spy.config.P6spySqlLogConfig</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日志输出到控制台</span></span><br><span class="line"><span class="attr">appender</span>=<span class="string">com.baomidou.mybatisplus.extension.p6spy.StdoutLogger</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 设置 p6spy driver 代理</span></span><br><span class="line"><span class="attr">deregisterdrivers</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 取消JDBC URL前缀</span></span><br><span class="line"><span class="attr">useprefix</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 配置记录 Log 例外,可去掉的结果集有error,info,batch,debug,statement,commit,rollback,result,resultset.</span></span><br><span class="line"><span class="attr">excludecategories</span>=<span class="string">info,debug,result,commit,resultset</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 日期格式</span></span><br><span class="line"><span class="attr">dateformat</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 实际驱动 可多个</span></span><br><span class="line"><span class="attr">driverlist</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 是否开启慢SQL记录</span></span><br><span class="line"><span class="attr">outagedetection</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 慢SQL记录标准 2 秒</span></span><br><span class="line"><span class="attr">outagedetectioninterval</span>=<span class="string">2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 自定义日志配置</span></span><br><span class="line"><span class="comment"># 可用的变量为:</span></span><br><span class="line"><span class="comment">#   %(connectionId)            connection id</span></span><br><span class="line"><span class="comment">#   %(currentTime)             当前时间</span></span><br><span class="line"><span class="comment">#   %(executionTime)           执行耗时</span></span><br><span class="line"><span class="comment">#   %(category)                执行分组</span></span><br><span class="line"><span class="comment">#   %(effectiveSql)            提交的SQL 换行</span></span><br><span class="line"><span class="comment">#   %(effectiveSqlSingleLine)  提交的SQL 不换行显示</span></span><br><span class="line"><span class="comment">#   %(sql)                     执行的真实SQL语句，已替换占位</span></span><br><span class="line"><span class="comment">#   %(sqlSingleLine)           执行的真实SQL语句，已替换占位 不换行显示</span></span><br><span class="line"><span class="attr">customLogMessageFormat</span>=<span class="string">[%(currentTime)] [%(category)-%(connectionId)] [execute time: %(executionTime) ms] execute sql:\n %(sql)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为整合<code>p6spy</code>,yml文件也必须做修改,连接配置采用<code>P6spy</code>代理。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.springbootp6spy.domain</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8085</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">springboot-p6spy</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 数据库配置</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment"># url: jdbc:mysql://localhost:3306/just_do_it</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:p6spy:mysql://localhost:3306/just_do_it</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">12345678</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.p6spy.engine.spy.P6SpyDriver</span></span><br></pre></td></tr></table></figure><p>自定义格式化类为了阅读以及调试代码方便，SQL关键字和占位符常量都采用了静态导入的方案。由于持久层使用的是<code>Mybatis</code> 和<code>Mybatis-plus</code> 框架，必须清楚使用<code>Mybatis</code>原生<code>XML</code>大多数人编写SQL通常是<code>小写</code>。但是采用<code>Mybatis-plus</code>框架以全自动ORM映射的形式拼接SQL语句则会导致关键字<code>大写</code>。所以在进行<code>SQL格式化</code>处理时必须考虑这两种情况。</p><p>所以处理必须按照固定流程。先将<code>占位符</code>进行处理得到格式相对完善的整行SQL，而后再处理<code>小写关键字</code>当存在小写关键字则会对SQL语句进行格式胡处理，最后处理<code>大写关键字</code>，当存在大写关键字才会格式化SQL。</p><p>由于目标是<code>输出小写的且格式化过后的sql</code>。如果<code>大写关键字</code>和<code>小写关键字</code>处理<code>顺序颠倒</code>并且SQL中存在大写关键字则会出现处理完<code>大写关键字</code>后SQL关键字转化为<code>小写关键字</code>被程序识别到再次处理。导致多次处理，最终会造成格式化解析错误的情况出现。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 原SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> 字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span> <span class="keyword">FROM</span> tb</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式化过后的SQL</span></span><br><span class="line"><span class="keyword">select</span></span><br><span class="line"></span><br><span class="line">字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line"></span><br><span class="line">tb</span><br></pre></td></tr></table></figure><p>自定义格式化类代码如下，通过继承<code>MessageFormattingStrategy</code>接口重写<code>formatMessage</code>方法实现SQL日志输出，在格式化处理之前必须采用<code>P6Util.singleLine()</code>方法处理，保证SQL打印在同一行，方便进行格式化处理。为了方便调试程序时优化SQL性能，将<code>took</code> SQL执行时长一同打印。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootp6spy.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.p6spy.engine.common.P6Util;</span><br><span class="line"><span class="keyword">import</span> com.p6spy.engine.spy.appender.MessageFormattingStrategy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.example.springbootp6spy.config.constant.P6spyConstant.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * P6spy配置类 设置自定义控制台打印完整Sql日志格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P6spySqlLogConfig</span> <span class="keyword">implements</span> <span class="title class_">MessageFormattingStrategy</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自定义Sql日志</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> connectionId 连接id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> now          当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elapsed      耗时多久</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> category     类别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prepared     mybatis带占位符的sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql          占位符换成参数的sql</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url          sql连接的 url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">formatMessage</span><span class="params">(<span class="type">int</span> connectionId, String now, <span class="type">long</span> elapsed, String category, String prepared, String sql, String url)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="string">&quot;&quot;</span>.equals(sql.trim()) ? <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(DATE_FORMAT).format(<span class="keyword">new</span> <span class="title class_">Date</span>()) + <span class="string">&quot; | took &quot;</span> + elapsed + <span class="string">&quot;ms | &quot;</span> + category</span><br><span class="line">                + <span class="string">&quot; | connection &quot;</span> + connectionId + formatSql(P6Util.singleLine(SPACE + sql)) + <span class="string">&quot;;&quot;</span> + NEW_LINE + LINE : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 格式化SQL</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql DML语句</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 格式化过后的Sql</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">formatSql</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理占位符</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlString</span> <span class="operator">=</span> sql</span><br><span class="line">                .replaceAll(SPACE_XML, SPACE)</span><br><span class="line">                .replaceAll(NULL_LINE, SPACE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理小写关键字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlLowerCase</span> <span class="operator">=</span> sqlString</span><br><span class="line">                .replaceAll(SELECT_LOWERCASE, NEW_LINE + SELECT_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(FROM_LOWERCASE, NEW_LINE + FROM_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(WHERE_LOWERCASE, NEW_LINE + WHERE_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(ORDER_LOWERCASE, NEW_LINE + ORDER_LOWERCASE)</span><br><span class="line">                .replaceAll(GROUP_LOWERCASE, NEW_LINE + GROUP_LOWERCASE)</span><br><span class="line">                .replaceAll(UNION_LOWERCASE, NEW_LINE + UNION_LOWERCASE)</span><br><span class="line">                .replaceAll(INSERT_LOWERCASE, NEW_LINE + INSERT_LOWERCASE)</span><br><span class="line">                .replaceAll(INTO_LOWERCASE, INTO_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(VALUES_LOWERCASE, NEW_LINE + VALUES_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(UPDATE_LOWERCASE, NEW_LINE + UPDATE_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(SET_LOWERCASE, NEW_LINE + SET_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(DELETE_LOWERCASE, NEW_LINE + DELETE_LOWERCASE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 处理大写关键字</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sqlUpperCase</span> <span class="operator">=</span> sqlLowerCase</span><br><span class="line">                .replaceAll(DELETE_UPPERCASE, NEW_LINE + DELETE_LOWERCASE)</span><br><span class="line">                .replaceAll(SELECT_UPPERCASE, NEW_LINE + SELECT_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(FROM_UPPERCASE, NEW_LINE + FROM_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(WHERE_UPPERCASE, NEW_LINE + WHERE_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(ORDER_UPPERCASE, NEW_LINE + ORDER_LOWERCASE)</span><br><span class="line">                .replaceAll(GROUP_UPPERCASE, NEW_LINE + GROUP_LOWERCASE)</span><br><span class="line">                .replaceAll(UNION_UPPERCASE, NEW_LINE + UNION_LOWERCASE)</span><br><span class="line">                .replaceAll(INSERT_UPPERCASE, NEW_LINE + INSERT_LOWERCASE)</span><br><span class="line">                .replaceAll(INTO_UPPERCASE, INTO_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(VALUES_UPPERCASE, NEW_LINE + VALUES_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(UPDATE_UPPERCASE, NEW_LINE + UPDATE_LOWERCASE + NEW_LINE)</span><br><span class="line">                .replaceAll(SET_UPPERCASE, NEW_LINE + SET_LOWERCASE + NEW_LINE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sqlUpperCase;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式化常量具体代码如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.springbootp6spy.config.constant;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * p6spy 常量类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/10/3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">P6spyConstant</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DATE_FORMAT</span> <span class="operator">=</span> <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 换行占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NEW_LINE</span> <span class="operator">=</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分隔符号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LINE</span> <span class="operator">=</span> <span class="string">&quot;==============================================================&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 select 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SELECT_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; select &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 SELECT 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SELECT_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; SELECT &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 from 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FROM_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; from &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 FROM 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FROM_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; FROM &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 where 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WHERE_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; where &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 WHERE 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">WHERE_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; WHERE &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 insert 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INSERT_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; insert &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 INSERT 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INSERT_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; INSERT &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 values 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VALUES_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; values &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 VALUES 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">VALUES_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; VALUES &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 update 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPDATE_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; update &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 UPDATE 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UPDATE_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; UPDATE &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 set 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; set &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 SET 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SET_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; SET &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 delete 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELETE_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; delete &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 DELETE 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DELETE_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; DELETE &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 order 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; order &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 ORDER 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; ORDER &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 group 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; group &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 GROUP 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">GROUP_UPPERCASE</span>  <span class="operator">=</span> <span class="string">&quot; GROUP &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 union 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNION_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; union &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 UNION 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">UNION_UPPERCASE</span>  <span class="operator">=</span> <span class="string">&quot; UNION &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 小写 into 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INTO_LOWERCASE</span> <span class="operator">=</span> <span class="string">&quot; into &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大写 INTO 关键字</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">INTO_UPPERCASE</span> <span class="operator">=</span> <span class="string">&quot; INTO &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 空格</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NULL_LINE</span> <span class="operator">=</span> <span class="string">&quot;                   &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPACE</span> <span class="operator">=</span> <span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xml解析占位符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPACE_XML</span> <span class="operator">=</span><span class="string">&quot;         &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了保证在格式的时候不会出现解析出错，关键字必须在前后用<code>空格</code>占位符。例如存在字段<code> update_time </code>，如果不采用前后设置<code>空格</code>占位符的方案，程序会在出现<code>update</code>关键字时直接进行格式化处理，结果则会出现。 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">update</span><br><span class="line">_time</span><br></pre></td></tr></table></figure><p>导致SQL即使在控制台输出也无法正常执行的问题。为防止以上情况发生必须在关键字常量定义时采取前后设置空格的方式。</p><h3 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h3><p>请求接口，在编译器<code>IDEA</code>控制台当中可输出<code>完整且格式化</code>过后的SQL</p><p><img src="../img/insertpost.png" alt="insertpost"></p><p><img src="../img/insertcons.png" alt="insertcons"></p><p>在编译器<code>Eclipse</code>控制台中同样可以输出<code>完整且格式化</code>过后的SQL</p><p><img src="../img/9191666192829_.pic_hd.jpg" alt="insertpost"></p><p>在不注释<code>P6spy.properties</code>文件的前提下打包部署到服务器后，对接口发送请求通过<code>tailf</code>命令查看 Jar文件运行日志可查看到<code>完整且格式化</code>的 SQL DML 操作。</p><p><img src="../img/console.png" alt="console"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中台实践，通用后端封装</title>
      <link href="/posts/23447.html"/>
      <url>/posts/23447.html</url>
      
        <content type="html"><![CDATA[<h1 id="中台实践，通用后端封装"><a href="#中台实践，通用后端封装" class="headerlink" title="中台实践，通用后端封装"></a>中台实践，通用后端封装</h1><h3 id="中台概念简介"><a href="#中台概念简介" class="headerlink" title="中台概念简介"></a>中台概念简介</h3><p>中台，互联网术语，一般应用于大中型企业。灵感来源于芬兰的一家游戏公司，是指搭建一个灵活快速应对变化的架构，快速实现前端提的需求，避免重复建设，<br>将共性剥离而出，达到提高工作效率目的。可最大限度得降低试错成本。中台大致可分为”数据中台”、”业务中台”和”技术中台”。本篇给大家讲解技术中台落地实践思路以及方案。</p><h3 id="技术中台代码实践"><a href="#技术中台代码实践" class="headerlink" title="技术中台代码实践"></a>技术中台代码实践</h3><p>话不多说直接上代码，<code>完整Demo地址</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/sheng_yu_lu/commonback.git</span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>再开发过程中，存在大量的重复且繁杂的简单增删改查操作。这样的简单操作几乎没有技术难度，反而会占用大量的项目开发的时间。<br>基于主流的微服务项目以中台的思路实践，必须将具体代码封装成一个单独的服务。以此来处重复且理简单的增删改查,当功能只有<code>简单增删改查</code>时真正的工作量仅仅只是生成实体类（可通过 EasyCode或者MybatisCodeHelper等插件生成，不了解的可以看我的前两篇文章《Java工程师必须懂的高速开发方案》），并在枚举类中定义即可。将真正的时间和精力用于处理复杂业务代码实现。</p><p><img src="../img/wfu.png" alt="微服务"></p><h3 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h3><p>采用三层架构的思想，大致流程为在前端向对应的接口发起请求后，业务逻辑层进行判断而后进行Sql拼接，持久层操作数据。</p><p><img src="../img/wmm.png" alt="未命名文件"></p><p>前端控制层代码，仅仅只做为前端响应接口，不做任何业务代码实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commonback.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.dto.CommonParmaDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.service.CommonService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用后端 前端控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommonService commonService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分页查询 无条件查询统计  有条件查询统计</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; list(<span class="meta">@RequestBody</span> CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> commonService.list(commonParmaDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; get(<span class="meta">@RequestBody</span> CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> commonService.get(commonParmaDTO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用新增或修改 通过operate操作来判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save_or_update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; saveOrUpdate(<span class="meta">@RequestBody</span> CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> commonService.saveOrUpdate(commonParmaDTO);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; delete(<span class="meta">@RequestBody</span> CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="keyword">return</span> commonService.delete(commonParmaDTO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接口参数模型封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commonback.common.dto;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用后端参数传递对象</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonParmaDTO</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前操作</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String operate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tableEnum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommonWhereDto&gt; where;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改或插入的字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CommonWhereDto&gt; sets;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 封装<code>tableEnum</code>数据表属性采用String类型是为了能够方便接收前端请求。将 <code>CommonParmaDTO</code>转化为 <code>CommonDTO</code>后属性<code>tableEnum</code>对应的类型为 <code>CommonTableEnum</code>用于定义后端需要增删改查的表以及字段，目的是为了保证<code>开闭原则</code>具体代码如下。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commonback.common.dbenum;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Getter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义通用后端需要增删改查的表以及字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">CommonTableEnum</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 岗位表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POST(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 部门表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DEPARMENT(<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户表 密码字段不允许被查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    USER(<span class="string">&quot;password&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 允许所有字段对外开放</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list   查询权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> get    详情权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> add    添加权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edit   编辑权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete 删除权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CommonTableEnum(<span class="type">boolean</span> list, <span class="type">boolean</span> get, <span class="type">boolean</span> add, <span class="type">boolean</span> edit, <span class="type">boolean</span> delete) &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">        <span class="built_in">this</span>.get = get;</span><br><span class="line">        <span class="built_in">this</span>.add = add;</span><br><span class="line">        <span class="built_in">this</span>.edit = edit;</span><br><span class="line">        <span class="built_in">this</span>.delete = delete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 全参构造 可保证开闭原则</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed  不允许查询的Sql字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list   查询权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> get    详情权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> add    添加权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> edit   编辑权限</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delete 删除权限</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CommonTableEnum(String filed, <span class="type">boolean</span> list, <span class="type">boolean</span> get, <span class="type">boolean</span> add, <span class="type">boolean</span> edit, <span class="type">boolean</span> delete) &#123;</span><br><span class="line">        <span class="built_in">this</span>.filed = filed;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">        <span class="built_in">this</span>.get = get;</span><br><span class="line">        <span class="built_in">this</span>.add = add;</span><br><span class="line">        <span class="built_in">this</span>.edit = edit;</span><br><span class="line">        <span class="built_in">this</span>.delete = delete;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不允许被查询的Sql字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String filed;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> list;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许获取详情</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> get;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许添加</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> add;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许编辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> edit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否允许删除</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> delete;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>其中通过构造的方案实现不允许被查询的字段定义，需要操作的表名称必须在该枚举类中进行定义。注：必须强制采用阿里巴巴代码规约进行定义（例如 类 <code>UserRecord</code> 对应的表名称为 <code>user_record</code> ,字段 <code>userName</code> 对应的Sql字段为 <code>user_name</code>），防止业务逻辑层代码解析报错。</p><h3 id="具体业务逻辑实现"><a href="#具体业务逻辑实现" class="headerlink" title="具体业务逻辑实现"></a>具体业务逻辑实现</h3><p>业务逻辑代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commonback.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.dbenum.CommonTableEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.dto.CommonDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.dto.CommonParmaDTO;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.exception.BusinessException;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.result.Result;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.result.ResultEnum;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.utils.AssertUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.common.utils.PubUtils;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.mapper.CommonMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.commonback.service.CommonService;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用后端 业务逻辑层 具体实现</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">CommonService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CommonMapper commonMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用分页查询 无条件查询统计  有条件查询统计</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; list(CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">CommonDTO</span> <span class="variable">commonDTO</span> <span class="operator">=</span> convertCommonDto(commonParmaDTO);</span><br><span class="line">        <span class="comment">// 判断是否有查询权限</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">allowList</span> <span class="operator">=</span> commonDTO.getTableEnum().isList();</span><br><span class="line">        AssertUtils.isTrue(allowList, ResultEnum.NO_OPERATOR_AUTH);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拼接条件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> getWhere(commonDTO);</span><br><span class="line">        <span class="comment">// 获取表名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> commonDTO.getTableEnum().name().toLowerCase();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页参数处理</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">page</span> <span class="operator">=</span> commonDTO.getPage();</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isNull(page) || page == <span class="number">0</span>) &#123;</span><br><span class="line">            commonDTO.setPage(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">size</span> <span class="operator">=</span> commonDTO.getSize();</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isNull(size) || size == <span class="number">0</span>) &#123;</span><br><span class="line">            commonDTO.setSize(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取分页起点</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> (commonDTO.getPage() - <span class="number">1</span>) * (commonDTO.getSize());</span><br><span class="line">        <span class="keyword">if</span> (start &lt; -<span class="number">1</span>) &#123;</span><br><span class="line">            start = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;HashMap&gt; list = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">listCount</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// 获取需要查询的字段</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filed</span> <span class="operator">=</span> <span class="built_in">this</span>.getSelectFiled(tableName, commonDTO.getTableEnum().getFiled());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(where)) &#123;</span><br><span class="line">            <span class="comment">// 无条件查询</span></span><br><span class="line">            listCount = commonMapper.listAllCount(tableName);</span><br><span class="line">            <span class="comment">// 当数据量为0时 无需继续访问数据库</span></span><br><span class="line">            <span class="keyword">if</span> (listCount == <span class="number">0</span>) &#123;</span><br><span class="line">                map = getResultMap(list, listCount);</span><br><span class="line">                <span class="keyword">return</span> Result.success(map);</span><br><span class="line">            &#125;</span><br><span class="line">            list = commonMapper.listAll(filed, tableName, start, commonDTO.getSize());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 带条件查询</span></span><br><span class="line">            listCount = commonMapper.listCountByWhere(tableName, where);</span><br><span class="line">            <span class="comment">// 当数据量为0时 无需继续访问数据库</span></span><br><span class="line">            <span class="keyword">if</span> (listCount == <span class="number">0</span>) &#123;</span><br><span class="line">                map = getResultMap(list, listCount);</span><br><span class="line">                <span class="keyword">return</span> Result.success(map);</span><br><span class="line">            &#125;</span><br><span class="line">            list = commonMapper.listByWhere(filed, tableName, where, start, commonDTO.getSize());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取返回map数据</span></span><br><span class="line">        map = getResultMap(list, listCount);</span><br><span class="line">        <span class="keyword">return</span> Result.success(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取返回map数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list      列表数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> listCount 数据数量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title function_">getResultMap</span><span class="params">(List&lt;HashMap&gt; list, Integer listCount)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">8</span>);</span><br><span class="line">        map.put(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">        map.put(<span class="string">&quot;total&quot;</span>, listCount);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将通用参数对象转换为通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CommonDTO <span class="title function_">convertCommonDto</span><span class="params">(CommonParmaDTO commonParmaDTO)</span> &#123;</span><br><span class="line">        <span class="comment">// 参数校验</span></span><br><span class="line">        AssertUtils.notEmpty(commonParmaDTO.getOperate(), ResultEnum.PARAM_REQUIRE);</span><br><span class="line">        AssertUtils.notEmpty(commonParmaDTO.getTableEnum(), ResultEnum.PARAM_REQUIRE);</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">CommonDTO</span> <span class="variable">commonDTO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CommonDTO</span>();</span><br><span class="line">        commonDTO.setSize(commonParmaDTO.getSize());</span><br><span class="line">        commonDTO.setPage(commonParmaDTO.getPage());</span><br><span class="line">        commonDTO.setOperate(commonParmaDTO.getOperate());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            commonDTO.setTableEnum(CommonTableEnum.valueOf(commonParmaDTO.getTableEnum().toUpperCase()));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            BusinessException.exception(ResultEnum.DATA_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        commonDTO.setWhere(commonParmaDTO.getWhere());</span><br><span class="line">        commonDTO.setSets(commonParmaDTO.getSets());</span><br><span class="line">        <span class="keyword">return</span> commonDTO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化编码字段</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SERIAL_VERSION_UID</span> <span class="operator">=</span> <span class="string">&quot;serialVersionUID&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 符号 .</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DOT</span> <span class="operator">=</span> <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实体包路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;mybatis.type-aliases-package&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String CLASS_PATH;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取查询字段</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed     不允许查询的字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSelectFiled</span><span class="params">(String tableName, String filed)</span> &#123;</span><br><span class="line">        <span class="comment">// 包含下划线则转换成驼峰 user_record --&gt; userRecord</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableNameCamel</span> <span class="operator">=</span> tableName.contains(<span class="string">&quot;_&quot;</span>) ? PubUtils.toCamelCase(tableName.toLowerCase()) : tableName;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将第一个字母转换为大写</span></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBufferFirst</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBufferOther</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">char</span>[] chars = tableNameCamel.toCharArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                stringBufferFirst.append((String.valueOf(chars[i]).toUpperCase()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stringBufferOther.append(chars[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> stringBufferFirst.append(stringBufferOther).toString();</span><br><span class="line">        <span class="comment">// 反射方式获取实体包路径下的类字节码</span></span><br><span class="line">        Class&lt;?&gt; aClass = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            aClass = Class.forName(CLASS_PATH + DOT + className);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.error(<span class="string">&quot;无法寻找到类 &quot;</span> + className);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取并处理字段</span></span><br><span class="line">        Field[] declaredFields = aClass.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 返回字段 返回形式 &quot;a,b,c_d……&quot;</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(declaredFields).stream()</span><br><span class="line">                .filter(item -&gt; !SERIAL_VERSION_UID.equalsIgnoreCase(item.getName()))</span><br><span class="line">                .filter(item -&gt; !PubUtils.toUnderScoreCase(item.getName()).equalsIgnoreCase(filed))</span><br><span class="line">                .map(item -&gt; PubUtils.toUnderScoreCase(item.getName()))</span><br><span class="line">                .collect(Collectors.joining(<span class="string">&quot;,&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字正则值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">NUMBER</span> <span class="operator">=</span> <span class="string">&quot;\\d*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精确查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">EQ</span> <span class="operator">=</span> <span class="string">&quot;eq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模糊查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LIKE</span> <span class="operator">=</span> <span class="string">&quot;like&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 范围查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BETWEEN</span> <span class="operator">=</span> <span class="string">&quot;between&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接条件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端查询参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getWhere</span><span class="params">(CommonDTO commonDTO)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">where</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">if</span> (commonDTO.getWhere() != <span class="literal">null</span>) &#123;</span><br><span class="line">            commonDTO.getWhere().stream().forEach(item -&gt; &#123;</span><br><span class="line">                <span class="comment">// 保证Sql正常执行 并防止Sql注入</span></span><br><span class="line">                <span class="keyword">if</span> (PubUtils.isNotEmpty(item.getFiled()) &amp;&amp; PubUtils.isNotEmpty(item.getValue()) &amp;&amp; !item.getFiled()</span><br><span class="line">                        .equalsIgnoreCase(item.getValue())) &#123;</span><br><span class="line">                    <span class="comment">// 处理字段</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempFiled</span> <span class="operator">=</span> parseValue(item.getFiled());</span><br><span class="line">                    <span class="comment">// 处理值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempValue</span> <span class="operator">=</span> parseValue(item.getValue());</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 字段值不能存在数字 并且字段和值不相等</span></span><br><span class="line">                    <span class="keyword">if</span> (!tempFiled.matches(NUMBER) &amp;&amp; !tempFiled.equalsIgnoreCase(tempValue)) &#123;</span><br><span class="line">                        <span class="comment">// 精确查询 …… where 1 = 1 and 字段 = 值</span></span><br><span class="line">                        <span class="keyword">if</span> (EQ.equalsIgnoreCase(item.getType())) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (item.isString()) &#123;</span><br><span class="line">                                <span class="comment">// 值为String 类型 字符拼接结果  字段 = &#x27;值&#x27;</span></span><br><span class="line">                                where.append(<span class="string">&quot; and &quot;</span>).append(tempFiled).append(<span class="string">&quot; = &quot;</span>).append(<span class="string">&quot;\&#x27;&quot;</span>).append(tempValue).append(<span class="string">&quot;\&#x27;&quot;</span>);</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="comment">// 值非String 类型 字符拼接结果  字段 = 值</span></span><br><span class="line">                                where.append(<span class="string">&quot; and &quot;</span>).append(tempFiled).append(<span class="string">&quot; = &quot;</span>).append(tempValue);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 模糊查询 …… where 1 = 1 and 字段 like &#x27;%值%&#x27;</span></span><br><span class="line">                        <span class="keyword">if</span> (LIKE.equalsIgnoreCase(item.getType())) &#123;</span><br><span class="line">                            where.append(<span class="string">&quot; and &quot;</span>).append(tempFiled).append(<span class="string">&quot; like \&#x27;%&quot;</span>).append(tempValue).append(<span class="string">&quot;%\&#x27; &quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 范围查询 …… where 1 = 1 and 字段 between 值1 and 值2</span></span><br><span class="line">                        <span class="keyword">if</span> (BETWEEN.equalsIgnoreCase(item.getType())) &#123;</span><br><span class="line">                            String[] values = tempValue.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                            where.append(<span class="string">&quot; and &quot;</span>).append(tempFiled).append(<span class="string">&quot; &quot;</span>).append(item.getType()).append(<span class="string">&quot; &quot;</span>).append(values[<span class="number">0</span>])</span><br><span class="line">                                    .append(<span class="string">&quot; and &quot;</span>).append(values[<span class="number">2</span>]);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> where.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止Sql注入 替换敏感符号</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sql 待处理Sql字段或值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">parseValue</span><span class="params">(String sql)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isNotEmpty(sql)) &#123;</span><br><span class="line">            <span class="keyword">return</span> sql.replaceAll(<span class="string">&quot;.*([&#x27;;#%]+|(--)+).*&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> sql;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加操作标识符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ADD</span> <span class="operator">=</span> <span class="string">&quot;add&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用新增或修改 通过operate操作来判断</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; saveOrUpdate(CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">CommonDTO</span> <span class="variable">commonDTO</span> <span class="operator">=</span> convertCommonDto(commonParmaDTO);</span><br><span class="line">        <span class="comment">// 获取操作</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">operate</span> <span class="operator">=</span> commonDTO.getOperate();</span><br><span class="line">        <span class="comment">// 获取表名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> commonDTO.getTableEnum().name().toLowerCase();</span><br><span class="line">        <span class="comment">// 获取条件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> getWhere(commonDTO);</span><br><span class="line">        <span class="keyword">if</span> (ADD.equalsIgnoreCase(operate)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PubUtils.isNotEmpty(where)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.failed(ResultEnum.DATA_ERROR, <span class="string">&quot;新增操作不允许有条件&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 插入数据</span></span><br><span class="line">                <span class="keyword">return</span> saveDate(commonDTO, tableName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (PubUtils.isEmpty(where)) &#123;</span><br><span class="line">                <span class="keyword">return</span> Result.failed(ResultEnum.DATA_ERROR, <span class="string">&quot;修改操作必须带有条件&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 修改数据</span></span><br><span class="line">                <span class="keyword">return</span> updateDate(commonDTO, tableName, where);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; delete(CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">CommonDTO</span> <span class="variable">commonDTO</span> <span class="operator">=</span> convertCommonDto(commonParmaDTO);</span><br><span class="line">        <span class="comment">// 获取条件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> getWhere(commonDTO);</span><br><span class="line">        <span class="comment">// 获取表名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> commonDTO.getTableEnum().name().toLowerCase();</span><br><span class="line">        <span class="comment">// 断言具有删除权限</span></span><br><span class="line">        AssertUtils.isTrue(commonDTO.getTableEnum().isDelete(), ResultEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="comment">// 条件校验</span></span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(where)) &#123;</span><br><span class="line">            Result.failed(ResultEnum.DATA_ERROR, <span class="string">&quot;删除条件不合法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 操作删除</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> commonMapper.delete(tableName, where);</span><br><span class="line">        <span class="keyword">return</span> Result.success(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonParmaDTO 通用后端参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; get(CommonParmaDTO commonParmaDTO) &#123;</span><br><span class="line">        <span class="comment">// 模型转换</span></span><br><span class="line">        <span class="type">CommonDTO</span> <span class="variable">commonDTO</span> <span class="operator">=</span> convertCommonDto(commonParmaDTO);</span><br><span class="line">        <span class="comment">// 获取表名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> commonDTO.getTableEnum().name().toLowerCase();</span><br><span class="line">        <span class="comment">// 断言具有详情权限</span></span><br><span class="line">        AssertUtils.isTrue(commonDTO.getTableEnum().isGet(), ResultEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="type">String</span> <span class="variable">where</span> <span class="operator">=</span> getWhere(commonDTO);</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(where)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.failed(ResultEnum.DATA_ERROR, <span class="string">&quot;获取详情必须带条件&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取允许查询的字段</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filed</span> <span class="operator">=</span> <span class="built_in">this</span>.getSelectFiled(tableName, commonDTO.getTableEnum().getFiled());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取详情 查询部分字段</span></span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">map</span> <span class="operator">=</span> commonMapper.getPartFiled(filed, tableName, where);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">        dataMap.put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">        <span class="keyword">return</span> Result.success(dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端查询参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Result&lt;?&gt; saveDate(CommonDTO commonDTO, String tableName) &#123;</span><br><span class="line">        <span class="comment">// 断言具有查询权限</span></span><br><span class="line">        AssertUtils.isTrue(commonDTO.getTableEnum().isAdd(), ResultEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="comment">// 获取字段以及值</span></span><br><span class="line">        String[] sql = getInsertSql(commonDTO);</span><br><span class="line">        <span class="keyword">if</span> (sql == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.failed(ResultEnum.DATA_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 数据持久化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> commonMapper.insert(tableName, sql[<span class="number">0</span>], sql[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> Result.success(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接插入的SQL  [&#x27;字段1&#x27;，&#x27;值1&#x27;,&#x27;字段2&#x27;，&#x27;值2&#x27;]</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端查询参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String[] getInsertSql(CommonDTO commonDTO) &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">fileds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">values</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">        <span class="keyword">if</span> (commonDTO.getSets() != <span class="literal">null</span>) &#123;</span><br><span class="line">            commonDTO.getSets().stream().forEach(item -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (PubUtils.isEmpty(item.getValue())) &#123;</span><br><span class="line">                    <span class="comment">// 计数</span></span><br><span class="line">                    count.incrementAndGet();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 解析字段</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempF</span> <span class="operator">=</span> parseValue(item.getFiled());</span><br><span class="line">                    <span class="comment">// 解析值</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempV</span> <span class="operator">=</span> parseValue(item.getValue());</span><br><span class="line">                    <span class="comment">// 正则校验 防止Sql注入</span></span><br><span class="line">                    <span class="keyword">if</span> (!tempF.matches(NUMBER) &amp;&amp; !tempF.equalsIgnoreCase(tempV)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (fileds.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            fileds.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                            values.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        fileds.append(tempF);</span><br><span class="line">                        values.append(<span class="string">&quot;\&#x27;&quot;</span>).append(tempV).append(<span class="string">&quot;\&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count.get() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;fileds.toString(), values.toString()&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改操作</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端查询参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Result&lt;?&gt; updateDate(CommonDTO commonDTO, String tableName, String where) &#123;</span><br><span class="line">        <span class="comment">// 断言具有修改权限</span></span><br><span class="line">        AssertUtils.isTrue(commonDTO.getTableEnum().isEdit(), ResultEnum.NO_OPERATOR_AUTH);</span><br><span class="line">        <span class="comment">// 获取修改字段以及值</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sets</span> <span class="operator">=</span> getSets(commonDTO);</span><br><span class="line">        <span class="keyword">if</span> (PubUtils.isEmpty(sets)) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.failed(ResultEnum.DATA_ERROR, <span class="string">&quot;修改的参数值不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改数据</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> commonMapper.update(tableName, where, sets);</span><br><span class="line">        <span class="keyword">return</span> Result.success(count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拼接修改字段以及值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> commonDTO 通用后端查询参数传递对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getSets</span><span class="params">(CommonDTO commonDTO)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sets</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="type">AtomicInteger</span> <span class="variable">count</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>();</span><br><span class="line">        <span class="keyword">if</span> (commonDTO.getSets() != <span class="literal">null</span>) &#123;</span><br><span class="line">            commonDTO.getSets().stream().forEach(item -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span> (PubUtils.isEmpty(item.getValue())) &#123;</span><br><span class="line">                    count.incrementAndGet();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempF</span> <span class="operator">=</span> parseValue(item.getFiled());</span><br><span class="line">                    <span class="type">String</span> <span class="variable">tempV</span> <span class="operator">=</span> parseValue(item.getValue());</span><br><span class="line">                    <span class="keyword">if</span> (!tempF.matches(NUMBER) &amp;&amp; !tempF.equalsIgnoreCase(tempV)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (sets.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                            sets.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        sets.append(tempF).append(<span class="string">&quot;=\&#x27;&quot;</span>).append(tempV).append(<span class="string">&quot;\&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (count.get() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sets.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中采用了防止 <code>字段名称出现数字</code> 以及 <code>字段名称与字段内容相等</code> 的措施防止SQL注入。查询方面通过Java反射机制将类字段加载，流式处理的方案实现字段过滤掉不可被查询的字段以及序列化字段，从而拼接成可查询的字段形式。条件处理，则必须指定字段是否为字符串类型防止SQL在拼接时报语法错误。</p><h3 id="持久层代码实现"><a href="#持久层代码实现" class="headerlink" title="持久层代码实现"></a>持久层代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.commonback.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用后端 数据控制层</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Lv</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/8/10</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CommonMapper</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件查询数据数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from $&#123;tableName&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(Integer.class)</span></span><br><span class="line">    Integer <span class="title function_">listAllCount</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无条件分页查询所有数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed     查询字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start     分页页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size      分页数据量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select $&#123;filed&#125; from $&#123;tableName&#125; limit #&#123;start&#125;,#&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(HashMap.class)</span></span><br><span class="line">    List&lt;HashMap&gt; <span class="title function_">listAll</span><span class="params">(<span class="meta">@Param(&quot;filed&quot;)</span> String filed, <span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;start&quot;)</span> <span class="type">int</span> start, <span class="meta">@Param(&quot;size&quot;)</span> Integer size)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带条件查询数据数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(1) from $&#123;tableName&#125; where 1 = 1 $&#123;where&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(Integer.class)</span></span><br><span class="line">    Integer <span class="title function_">listCountByWhere</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;where&quot;)</span> String where)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 带条件分页查询数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed     查询字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start     分页页码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> size      分页数据量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select $&#123;filed&#125; from $&#123;tableName&#125; where 1 = 1 $&#123;where&#125; limit #&#123;start&#125;,#&#123;size&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(HashMap.class)</span></span><br><span class="line">    List&lt;HashMap&gt; <span class="title function_">listByWhere</span><span class="params">(<span class="meta">@Param(&quot;filed&quot;)</span> String filed, <span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;where&quot;)</span> String where, <span class="meta">@Param(&quot;start&quot;)</span> <span class="type">int</span> start, <span class="meta">@Param(&quot;size&quot;)</span> Integer size)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileds    字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values    值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into $&#123;tableName&#125; ($&#123;fileds&#125;) values ($&#123;values&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(Integer.class)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;fileds&quot;)</span> String fileds, <span class="meta">@Param(&quot;values&quot;)</span> String values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> sets      修改字段以及值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Update(&quot;update $&#123;tableName&#125; set $&#123;sets&#125; where 1 = 1 $&#123;where&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(Integer.class)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;where&quot;)</span> String where, <span class="meta">@Param(&quot;sets&quot;)</span> String sets)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from $&#123;tableName&#125; where 1 = 1 $&#123;where&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(Integer.class)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;where&quot;)</span> String where)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取详情</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filed     字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> tableName 表名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> where     条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Select(&quot;select $&#123;filed&#125; from $&#123;tableName&#125; where 1 = 1 $&#123;where&#125; limit 1&quot;)</span></span><br><span class="line">    <span class="meta">@ResultType(HashMap.class)</span></span><br><span class="line">    HashMap <span class="title function_">getPartFiled</span><span class="params">(<span class="meta">@Param(&quot;filed&quot;)</span> String filed, <span class="meta">@Param(&quot;tableName&quot;)</span> String tableName, <span class="meta">@Param(&quot;where&quot;)</span> String where)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了适应多种类型DML，采用注解拼接SQL的方案。并且在字段、条件、以及表名称上必须采用<code>$</code>符号拼接。Mybatis 框架实现机制 <code>$</code>符号是不会经过编译的就直接执行的。业务逻辑层处理的表名称和字段以及条件都是<code>String</code>类型，如果采用 <code>#</code> 符号拼接则会出现</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;字段&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span> <span class="string">&#x27;and ……&#x27;</span>；</span><br></pre></td></tr></table></figure><p>上述语法报错，采用 <code>$</code>符号虽然官方解释会存在SQL注入的风险，但由于已经在业务逻辑层进行过处理，所以可以在持久层采用 <code>$</code>符号进行拼接避免SQL语法报错。</p><h3 id="接口调试"><a href="#接口调试" class="headerlink" title="接口调试"></a>接口调试</h3><p>接口测采用的是最主流的接口调试工具postman。由于持久层使用的是mybatis框架，可采用mybatis login pluin插件查看SQL日志 ，不了解的可以看我的前两篇博客《Java工程师必须了解的高速开发方案》。</p><p>条件查询</p><p><img src="../img/listWherePost.png" alt="条件查询iShot2022-09-18 18.06.59"></p><p><img src="../img/listWhere.png" alt="条件查询iShot2022-09-18 18.07.22"></p><p>详情</p><p><img src="../img/getPost.png" alt="详情iShot2022-09-18 17.58.19"></p><p><img src="../img/getCode.png" alt="详情 iShot2022-09-18 18.00.49"></p><p>添加</p><p><img src="../img/addPost.png" alt="添加iShot2022-09-18 23.36.24"></p><p><img src="../img/addCode.png" alt="添加iShot2022-09-18 23.37.03"></p><p>删除</p><p><img src="../img/delPost.png" alt="删除iShot2022-09-18 17.58.10"></p><p><img src="../img/delCode.png" alt="删除iShot2022-09-18 17.55.11"></p><p>修改</p><p><img src="../img/editPost.png" alt="修改iShot2022-09-18 23.41.08"></p><p><img src="../img/editCode.png" alt="修改iShot2022-09-18 23.40.57"></p><p>无条件查询</p><p><img src="../img/listPost.png" alt="无条件查询iShot2022-09-18 23.42.00"></p><p><img src="../img/listCode.png" alt="无条件查询iShot2022-09-18 23.42.40"></p><h3 id="后期改造升级思路"><a href="#后期改造升级思路" class="headerlink" title="后期改造升级思路"></a>后期改造升级思路</h3><p>通用后端封装虽然完全可以在内网正常操作，但是必须考虑如果放置在公网环境下遭受黑客攻击的情况，前文提到微服务大致访问后端接口的方式。请求会先进入网关，可以考虑在网关层面进行防止SQL注入处理，通过网关整合<code>SpringSecurity</code>或者是国产的基于SpringSecurity改造而来的<code>SaToken</code>等技术进行鉴权，整合阿里系产品<code>Sentinal</code>的方案来进行流量控制。整合<code>zookeeper</code>或者<code>redis</code>实现分布式锁，通过<code>mycat</code>进行分库分表用<code>zookeeper</code>生成分布式id。使该中台服务能够承受更大的QPS。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>新概念协同开发方案</title>
      <link href="/posts/1.html"/>
      <url>/posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="新概念协同开发方案"><a href="#新概念协同开发方案" class="headerlink" title="新概念协同开发方案"></a>新概念协同开发方案</h2><h2 id="新概念协同开发方案-1"><a href="#新概念协同开发方案-1" class="headerlink" title="新概念协同开发方案"></a>新概念协同开发方案</h2><h1 id="新概念协同开发方案-2"><a href="#新概念协同开发方案-2" class="headerlink" title="新概念协同开发方案"></a>新概念协同开发方案</h1><h3 id="Dbmate"><a href="#Dbmate" class="headerlink" title="Dbmate"></a>Dbmate</h3><p>Dbmate 基于Golang实现的数据库迁移工具,是一个独立的命令行工具，可与 Go、Node.js、Python、Ruby、PHP 或用来编写数据库支持的应用程序的任何其他语言或框架一起使用。可用于 MySQL、PostgreSQL、SQLite等主流数据库在多个环境之间<code>保持数据库同步</code>。</p><h3 id="windows安装dbmate"><a href="#windows安装dbmate" class="headerlink" title="windows安装dbmate"></a>windows安装dbmate</h3><p>直接通过Github下载release版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/amacneil/dbmate/releases</span><br></pre></td></tr></table></figure><p>下载完成后将.exe文件重命名为dbmate并为其创建指定目录，方便环境变量配置。</p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=397695a759521fd42b4f8358b37da446" alt="img"></p><p>为了能够使dbmate在所有目录下都可以使用，必须配置环境变量配置。</p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=eb34c679ce1e87c9dd63486f0f7d4ed0" alt="img"></p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=0859e516b2c166fcd43ea47ec2f87081" alt="img"></p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=30586b8d81f1f9522ed5cdb4301dd35a" alt="img"></p><p>在系统变量列表中 <code>CLASSPATH</code> 行新建dbmate变量 ，路径只需指定到 .exe 文件上一级目录。</p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=c83e1f9d4e70734e615afaae94ab57a3" alt="img"></p><p>配置完CLASSPATH 还需要配置 <code>Path</code>变量<br><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=5fa19496069788ef96c85c1b99e035ca" alt="img"></p><h3 id="主要命令"><a href="#主要命令" class="headerlink" title="主要命令"></a>主要命令</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">dbmate --help    # 打印使用帮助 </span><br><span class="line">dbmate new       # 生成新的迁移文件  </span><br><span class="line">dbmate up        # 创建数据库（如果它不存在）并运行任何挂起的迁移  </span><br><span class="line">dbmate create    # 创建数据库  </span><br><span class="line">dbmate drop      # 删除数据库  </span><br><span class="line">dbmate migrate   # 运行任何挂起的迁移  </span><br><span class="line">dbmate rollback  # 回滚最近的迁移  </span><br><span class="line">dbmate down      # 回滚的别名  </span><br><span class="line">dbmate status    # 显示所有迁移的状态（支持 --exit-code 和 --quiet）  </span><br><span class="line">dbmate dump      # 输出数据库 schema.sql 文件  </span><br><span class="line">dbmate wait      # 等待数据库服务器可用</span><br></pre></td></tr></table></figure><p>以下选项可用于所有命令。必须按 顺序使用命令行参数。大多数选项也可以通过环境变量进行配置（并从文件中加载，这有助于在团队成员之间共享配置）。 格式 <code>dbmate [global options] command [command options]``.env</code><br><code>注意 drop 命令会删除所有数据库文件</code></p><ul><li><code>--url, -u &quot;protocol://host:port/dbname&quot;</code>- 直接指定数据库网址。<em>（env： <code>$DATABASE_URL</code>）</em></li><li><code>--env, -e &quot;DATABASE_URL&quot;</code>- 指定要从中读取数据库连接 URL 的环境变量。</li><li><code>--migrations-dir, -d &quot;./db/migrations&quot;</code>- 保存迁移文件的位置。<em>（env： <code>$DBMATE_MIGRATIONS_DIR</code>）</em></li><li><code>--migrations-table &quot;schema_migrations&quot;</code>- 用于记录迁移的数据库表<em>（env：<code>$DBMATE_MIGRATIONS_TABLE</code>）</em></li><li><code>--schema-file, -s &quot;./db/schema.sql&quot;</code>- 用于保存架构.sql文件的路径。<em>（env： <code>$DBMATE_SCHEMA_FILE</code>）</em></li><li><code>--no-dump-schema</code>- 不要在迁移/回滚时自动更新架构.sql文件<em>（环境：<code>$DBMATE_NO_DUMP_SCHEMA</code>）</em></li><li><code>--wait</code>- 等待数据库变为可用，然后再执行后续命令<em>（env：<code>$DBMATE_WAIT</code>）</em></li><li><code>--wait-timeout 60s</code>- 超时 —wait 标志 <em>（env： <code>$DBMATE_WAIT_TIMEOUT</code>）</em></li></ul><p>运行数据迁移案例 (—url )</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbmate --url &quot;mysql://dbcp-dev:Duubee@123@192.168.16.213:3306/dbcp-dev&quot;  migrate</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>创建连接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dbmate --url &quot;mysql://dbcp-dev:Duubee@123@192.168.16.213:3306/dbcp-dev&quot; migrate</span><br><span class="line"></span><br><span class="line">dbmate --url &quot;mysql://username:password@host:port/dbname&quot; command</span><br></pre></td></tr></table></figure><p>进入dbcp-backend项目文件，通过dbmate new 命令在migrations目录下创建sql文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dbmate new create\_data\_dbcp\_punch\_records\_historyDML</span><br></pre></td></tr></table></figure><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=9dcbc25f9225c47e40a7e404b4ecc47b" alt="img"><br>通过dbmate new 命令创建的文件名称为 时间戳+自定义名称 ,创建成功后可以将新创建的表放入该sql文件中。</p><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=67e5bc001274f55090e4bf375eb987c5" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> migrate:up        数据表创建语句  </span><br><span class="line"></span><br><span class="line"> migrate:down      数据表删除语句</span><br><span class="line">注意事项：当表无法适应需求而不得不修改DDL时，应在修改过后通过dbmate创建新的sql文件放置到migrations目录的同时不能变更或修改原有的sql文件。</span><br></pre></td></tr></table></figure><p><img src="http://doc.service.duubee.com/server/index.php?s=/api/attachment/visitFile&sign=4d5ac00ce17707fa881485e1c910bd29" alt="img"></p><p>todo:</p><p>sql文件存放入土所示，migrations目录下的文件，DDL语句存放于struct路径下，DML语句存放于data路径。其中prod是生产环境，test是测试环境，与系统相关数据（如工作流配置）存放于system路劲下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">命名规则  </span><br><span class="line">        dml 统一用 insert_+表名</span><br><span class="line">        DDL 统一用 create_+表名</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java工程师必须了解的高速开发方案</title>
      <link href="/posts/15286.html"/>
      <url>/posts/15286.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java工程师必须了解的高速开发方案"><a href="#Java工程师必须了解的高速开发方案" class="headerlink" title="Java工程师必须了解的高速开发方案"></a>Java工程师必须了解的高速开发方案</h1><h3 id="IDEA插件"><a href="#IDEA插件" class="headerlink" title="IDEA插件"></a>IDEA插件</h3><h4 id="mybatisCodeHelperPro"><a href="#mybatisCodeHelperPro" class="headerlink" title="mybatisCodeHelperPro"></a>mybatisCodeHelperPro</h4><p>最大限度的减轻Mybatis框架在编写过程中的繁琐性，单表操作时保持灵活性的同时无限的接近于JPA的简洁，使用SpringDataJPA 从DB中获取对象仅仅只需要编写对应的Java代码即可，底层会根据方法名自动拼接Sql.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User <span class="title function_">findByUsernameAndPassword</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure><p>mybatisCodeHelperPro 可通过同样的方式进行Orm层api命名（可使用阿里巴巴代码规约的OOP规约对其方法进行命名），通过插件在配置文件生成Sql。无限的接近于JPA全自动实现ORM映射的同时保持Mybatis灵活的优点。其余功能包括使用该插件进行CodeFirst方式开发也可以通过连接数据库生成代码,测试Sql，orm对象导航，事半功倍的同时最大限度的规避Sql操作的失误。</p><p><img src="../img/m3.png" alt="img"></p><p><img src="../img/m4.png" alt="img"></p><p>详细操作教程：<a href="https://www.bilibili.com/video/BV1Yv411N7Y1?spm_id_from=333.337.search-card.all.click&vd_source=85a404d3867ac0576be526de4c3d8823">【程序员必备】IDEA中超级好用的MyBatis插件，yyds！_哔哩哔哩_bilibili</a></p><p>下载链接: <a href="https://pan.baidu.com/s/1hhppw2VyCTxzP9LIb5gCSg">https://pan.baidu.com/s/1hhppw2VyCTxzP9LIb5gCSg</a> 提取码: gegt</p><p>备用链接：<a href="https://pan.baidu.com/s/1ed32Y10da6Xcj5RIYKkkFg">https://pan.baidu.com/s/1ed32Y10da6Xcj5RIYKkkFg</a> 提取码：c6rr</p><h4 id="Mybatis-Log-plugin"><a href="#Mybatis-Log-plugin" class="headerlink" title="Mybatis Log plugin"></a>Mybatis Log plugin</h4><p>利用Mybatis框架的日志机制，将控制台sql以完整的形式打印，在调试代码时能够非常方便的观察数据的变化以及准确的定位程序bug。</p><p><img src="../img/log.png" alt="img"></p><p>详细使用说明：[<a href="https://blog.csdn.net/LT11hka/article/details/103531653?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Mybatis%20Log%20plugin&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-103531653.142%5D">https://blog.csdn.net/LT11hka/article/details/103531653?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Mybatis%20Log%20plugin&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-103531653.142]</a>(<a href="https://blog.csdn.net/LT11hka/article/details/103531653?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Mybatis">https://blog.csdn.net/LT11hka/article/details/103531653?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=Mybatis</a> Log plugin&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduweb~default-1-103531653.142)v25control,157v15new_3&amp;spm=1018.2226.3001.4187</p><p>安装方式： <a href="https://blog.csdn.net/yuyu1067/article/details/113743698?ops_request_misc=%7B%22request_id%22:%22165648508016781818777997%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165648508016781818777997&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-113743698-null-null.142">https://blog.csdn.net/yuyu1067/article/details/113743698?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165648508016781818777997%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165648508016781818777997&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>baidu_landing_v2~default-2-113743698-null-null.142</a>v25control,157v15new_3&amp;utm_term=Mybatis+Log+plugin&amp;spm=1018.2226.3001.4187</p><p>下载链接：<a href="https://pan.baidu.com/s/1eqALLAQMYW-OlwF5mDbGSg">https://pan.baidu.com/s/1eqALLAQMYW-OlwF5mDbGSg</a> 提取码：sjc8</p><h4 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h4><p>该插件为IDEA自带插件，可以作为所有主流数据库可视化管理工具。与jetbrain全家桶中的企业级数据库管理工具datagrip有着同样的功能以及用户体验，绝大数操作完全相同。在进行DML以及DDL编写时可获得非常智能的提示。在进行Update 或delete等危险操作时缺少条件会在第一时间进行阻断提示。可以非常有效的规避误操作。</p><p><img src="../img/d.png" alt="img"></p><p>详细教程：<a href="https://www.bilibili.com/video/BV1vN411Z7VY?spm_id_from=333.337.search-card.all.click&amp;vd_source=85a404d3867ac0576be526de4c3d8823">https://www.bilibili.com/video/BV1vN411Z7VY?spm_id_from=333.337.search-card.all.click&amp;vd_source=85a404d3867ac0576be526de4c3d8823</a></p><p>详细教程： <a href="https://www.bilibili.com/video/BV1gq4y1j7rn/?spm_id_from=333.788&amp;vd_source=85a404d3867ac0576be526de4c3d8823">https://www.bilibili.com/video/BV1gq4y1j7rn/?spm_id_from=333.788&amp;vd_source=85a404d3867ac0576be526de4c3d8823</a></p><h4 id="GenerateAllSetter"><a href="#GenerateAllSetter" class="headerlink" title="GenerateAllSetter"></a>GenerateAllSetter</h4><p>在需要把传入的参数与赋值给Java对象时，通常可采用 modelMapper 或者Spring框架提供的BeanUtils 进行对象赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ObjectTarget</span> <span class="variable">objectTarget</span> <span class="operator">=</span> modelMapper.map(ObjectTargetDto,ObjectTarget.class);</span><br><span class="line">BeanUtils.copyProperties(sources,target);</span><br></pre></td></tr></table></figure><p>但依然会存在部分场景无法使用上述两种方案，例如架构上采用低代码方案亦或是参数值与对象属性之间映射。只能采取set()方法赋值，GenerateAllSetter插件可在第一时间生成对象的所有set()方法，在开发过程中可以有效规避漏掉某一个属性没有写set()方法赋值而导致的逻辑bug。</p><p><img src="../img/g1.png" alt="img"></p><p><img src="../img/g2.png" alt="img"></p><p>操作方法：<a href="https://blog.csdn.net/u010608551/article/details/111520485?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=GenerateAllSetter&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-111520485.nonecase&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/u010608551/article/details/111520485?ops_request_misc=&amp;request_id=&amp;biz_id=102&amp;utm_term=GenerateAllSetter&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-111520485.nonecase&amp;spm=1018.2226.3001.4187</a></p><h4 id="SequenceDiagram"><a href="#SequenceDiagram" class="headerlink" title="SequenceDiagram"></a>SequenceDiagram</h4><p>在业务逻辑复杂的场景下，无论是做Bug修复还是二次开发亦或是在其基础上扩展新模块。都不得不弄清楚已有的代码逻辑，而SequenceDiagram插件则可以将接口的调用关系，整个时序图展示出来，对深入了解项目有很大的帮助。该插件还可将时序图导出，非常适合用于编写开发文档方便后期维护。</p><p><img src="../img/s.png" alt="img"></p><p><img src="../img/s2.png" alt="img"></p><h4 id="Jrebel"><a href="#Jrebel" class="headerlink" title="Jrebel"></a>Jrebel</h4><p>使用IDEA最影响效率的问题在于编写代码后无法直接生效不得不重启服务器使新修改的代码生效，虽然Spring等开源社区都已经提出了热部署（既不用重启服务器直接使代码生效）的解决方案，但其可靠性仅仅只是与Eclipse持平。 目前市场上最可靠的热部署插件Jrebel，操作简单可靠，非常适合用于微服务项目启动。</p><p><img src="../img/j.png" alt="img"></p><p>破解操作方法：<a href="https://blog.csdn.net/lianghecai52171314/article/details/105637251?ops_request_misc=%7B%22request_id%22:%22165649038016782246499771%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165649038016782246499771&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105637251-null-null.142%5Ev25%5Econtrol,157%5Ev15%5Enew_3&utm_term=Jrebel&spm=1018.2226.3001.4187">(141条消息) JRebel插件使用详解_梁云亮的博客-CSDN博客_jrebel</a></p><h4 id="Alibaba-Java-Coding-Guidelines"><a href="#Alibaba-Java-Coding-Guidelines" class="headerlink" title="Alibaba Java Coding Guidelines"></a>Alibaba Java Coding Guidelines</h4><p>阿里巴巴代码规约是目前最为全面的一套规范，包括注释以及代码编写方面的规范。虽然是公认的能够最大限度的规避开发风险，然而其内容过多，开发人员无法在开发的过程中一边设计程序一边检查代码以及注释是否符合该规约。这个时候就需要Alibaba Java Coding Guidelines 插件代替人工检查代码是否规范，以此规避风险。</p><p><img src="../img/alibaba.png" alt="img"></p><h4 id="Alibaba-Cloud-Toolkit"><a href="#Alibaba-Cloud-Toolkit" class="headerlink" title="Alibaba Cloud Toolkit"></a>Alibaba Cloud Toolkit</h4><p>市场上几乎所有好用的SSH终端工具以及文件上传工具都需要付费才能下载使用，而Alibaba Cloud Toolkit则是一款完全免费而且功能强大的SSH终端工具，在运维方面其内置功能可以完美适配阿里云服务器，除了可作为终端命令行工具使用还可以用来上传文件，在开发方面可以快速构建Dubbo或者SpringCloudAlibaba项目。</p><p><img src="../img/cloudToolkit.png" alt="img"></p><p>详细操作教程：<a href="https://www.aliyun.com/product/cloudtoolkit">Cloud Toolkit阿里云开发者插件工具_免费本地IDE插件工具 - 阿里云 (aliyun.com)</a></p><p>使用指引：<a href="https://help.aliyun.com/document_detail/147728.html?spm=5176.11997469.J_7985555940.2.7a8f4e2bMSWdMy">使用指引 (aliyun.com)</a></p><h4 id="Translation"><a href="#Translation" class="headerlink" title="Translation"></a>Translation</h4><p>定义变量、方法、类、等名称时为了保证代码可读性和可维护性，必须严格遵循阿里巴巴代码规约，既变量、方法等命名需使用符合其语义的单词命名。translation插件可以直接调用谷歌的翻译接口进行翻译功能。在进行jdk源代码阅读时也可用于英文注释翻译，可以帮助使用者深入了解开源技术。</p><p><img src="../img/t1.png" alt="img"></p><p><img src="../img/t2.png" alt="img"></p><h3 id="前后端对接"><a href="#前后端对接" class="headerlink" title="前后端对接"></a>前后端对接</h3><p>当前主流开发技术栈都是前后端绝对分离，这种场景导致了很多前后端在协调对接方面的问题，无论是postman还是SwaggerUi都是存在很多不足之处，前者在于无法准确的确定后端接口URL以及所需的参数，后者SwaggerUI缺点在于后端代码繁杂，假如需要前端准备完整的Json请求参数而去使用过多的DTO则完全违背低代码开发原则。两者都无法及时告知前端开发人员接口变动消息，也无法在接口测试时进行断言操作，从而导致很多意想不到的线上Bug。而Eolink则是完全为解决这一系列问题而诞生的，其功能包括断言，通知，接口信息分享，线上Bug调试，项目接口文档管理等功能，可以最大限度的规避前后端对接的风险。</p><p><img src="../img/e1.png" alt="img"></p><p>官网地址：<a href="https://global.eolinker.com/">api接口管理平台<em>api管理系统</em>接口自动化平台-Eolink接口管理 (eolinker.com)</a></p><p>操作教程1：<a href="https://www.bilibili.com/video/BV1Q44y137g4?spm_id_from=333.999.0.0&vd_source=85a404d3867ac0576be526de4c3d8823">弃用swagger + postman， Eolink 真香 ~ ~_哔哩哔哩_bilibili</a></p><p>操作教程2：<a href="https://www.bilibili.com/video/BV15Y4y157Dq?spm_id_from=333.999.0.0&vd_source=85a404d3867ac0576be526de4c3d8823">API接口开发怎么才能更高效？文档定义、开发联调、测试上线 … Eolink都能帮忙_哔哩哔哩_bilibili</a></p><h3 id="DB设计"><a href="#DB设计" class="headerlink" title="DB设计"></a>DB设计</h3><p>数据库设计虽然难度系数不大，但很容易被语法问题绊倒。时间长了即使理论方面的知识掌握的已经非常牢固，却还是无法摆脱固定思维，无法将心思放在DB设计上而是过于注重语法问题。ERmaster是一款Eclipse数据库设计插件,其目的在于可以通过Er图直接生成对应的DDL语句。或者在微服务系统强制解耦合的情况下用于描述数据库之间的对应关系。</p><p><img src="../img/ermaster.jpg" alt="img"></p><p>安装方法：<a href="https://blog.csdn.net/qq_43126276/article/details/84427407?ops_request_misc=%7B%22request_id%22:%22165649309416782395334563%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=165649309416782395334563&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-84427407-null-null.142">https://blog.csdn.net/qq_43126276/article/details/84427407?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522165649309416782395334563%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=165649309416782395334563&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2<del>all</del>sobaiduend~default-2-84427407-null-null.142</a>v25control,157v15new_3&amp;utm_term=ErMaster%E5%AE%89%E8%A3%85&amp;spm=1018.2226.3001.4187</p><p>操作教程1：<a href="https://www.bilibili.com/video/BV1Ev411P7Cg?p=3&vd_source=85a404d3867ac0576be526de4c3d8823">数据库设计-数据库设计之ERmaster和PowerDesigner的使用_哔哩哔哩_bilibili</a></p><p>操作教程2：<a href="https://www.bilibili.com/video/BV1Ev411P7Cg?p=4&amp;vd_source=85a404d3867ac0576be526de4c3d8823">https://www.bilibili.com/video/BV1Ev411P7Cg?p=4&amp;vd_source=85a404d3867ac0576be526de4c3d8823</a></p><p>操作教程3：<a href="https://www.bilibili.com/video/BV1Ev411P7Cg?p=5&amp;vd_source=85a404d3867ac0576be526de4c3d8823">https://www.bilibili.com/video/BV1Ev411P7Cg?p=5&amp;vd_source=85a404d3867ac0576be526de4c3d8823</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[/* @font-face {  font-family: Candyhome;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/Candyhome.ttf);  font-display: swap;  font-weight: lighter;} */@font-face {  font-family: ZhuZiAYuanJWD;  src: url(https://npm.elemecdn.com/anzhiyu-blog@1.1.6/fonts/ZhuZiAWan.woff2);  font-display: swap;  font-weight: lighter;}div#menus {  font-family: "ZhuZiAYuanJWD";}h1#site-title {  font-family: ZhuZiAYuanJWD;  font-size: 3em !important;}a.article-title,a.blog-slider__title,a.categoryBar-list-link,h1.post-title {  font-family: ZhuZiAYuanJWD;}.iconfont {  font-family: "iconfont" !important;  font-size: 3em;  /* 可以定义图标大小 */  font-style: normal;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;}/* 时间轴生肖icon */svg.icon {  /* 这里定义svg.icon，避免和Butterfly自带的note标签冲突 */  width: 1em;  height: 1em;  /* width和height定义图标的默认宽度和高度*/  vertical-align: -0.15em;  fill: currentColor;  overflow: hidden;}.icon-zhongbiao::before {  color: #f7c768;}/* bilibli番剧插件 */#article-container .bangumi-tab.bangumi-active {  background: var(--anzhiyu-theme);  color: var(--anzhiyu-ahoverbg);  border-radius: 10px;}a.bangumi-tab:hover {  text-decoration: none !important;}.bangumi-button:hover {  background: var(--anzhiyu-theme) !important;  border-radius: 10px !important;  color: var(--anzhiyu-ahoverbg) !important;}a.bangumi-button.bangumi-nextpage:hover {  text-decoration: none !important;}.bangumi-button {  padding: 5px 10px !important;}a.bangumi-tab {  padding: 5px 10px !important;}svg.icon.faa-tada {  font-size: 1.1em;}.bangumi-info-item {  border-right: 1px solid #f2b94b;}.bangumi-info-item span {  color: #f2b94b;}.bangumi-info-item em {  color: #f2b94b;}/* 解决artitalk的图标问题 */#uploadSource > svg {  width: 1.19em;  height: 1.5em;}/*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */#page-header:not(.not-top-img):before {  background-color: transparent !important;}/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: rgba(255, 255, 255, 0.9);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: rgba(255, 255, 255, 0.9);}/* 文章页面正文背景 */div#post {  background: rgba(255, 255, 255, 0.9);}/* 分页页面 */div#page {  background: rgba(255, 255, 255, 0.9);}/* 归档页面 */div#archive {  background: rgba(255, 255, 255, 0.9);}/* 标签页面 */div#tag {  background: rgba(255, 255, 255, 0.9);}/* 分类页面 */div#category {  background: rgba(255, 255, 255, 0.9);}/*夜间模式伪类遮罩层透明*/[data-theme="dark"] #recent-posts > .recent-post-item {  background: #121212;}[data-theme="dark"] .card-widget {  background: #121212 !important;}[data-theme="dark"] div#post {  background: #121212 !important;}[data-theme="dark"] div#tag {  background: #121212 !important;}[data-theme="dark"] div#archive {  background: #121212 !important;}[data-theme="dark"] div#page {  background: #121212 !important;}[data-theme="dark"] div#category {  background: #121212 !important;}[data-theme="dark"] div#category {  background: transparent !important;}/* 页脚透明 */#footer {  background: transparent !important;}/* 头图透明 */#page-header {  background: transparent !important;}#rightside > div > button {  border-radius: 5px;}/* 滚动条 */::-webkit-scrollbar {  width: 10px;  height: 10px;}::-webkit-scrollbar-thumb {  background-color: #3b70fc;  border-radius: 2em;}::-webkit-scrollbar-corner {  background-color: transparent;}::-moz-selection {  color: #fff;  background-color: #3b70fc;}/* 音乐播放器 *//* .aplayer .aplayer-lrc {  display: none !important;} */.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body {  left: -66px !important;  transition: all 0.3s;  /* 默认情况下缩进左侧66px，只留一点箭头部分 */}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body:hover {  left: 0 !important;  transition: all 0.3s;  /* 鼠标悬停是左侧缩进归零，完全显示按钮 */}.aplayer.aplayer-fixed {  z-index: 999999 !important;}/* 评论框  */.vwrap {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 30px 0px;}/* 设置评论框 */.vcard {  box-shadow: 2px 2px 5px #bbb;  background: rgba(255, 255, 255, 0.3);  border-radius: 8px;  padding: 30px;  margin: 30px 0px 0px 0px;}/* md网站下划线 */#article-container a:hover {  text-decoration: none !important;}#article-container #hpp_talk p img {  display: inline;}/* 404页面 */#error-wrap {  position: absolute;  top: 40%;  right: 0;  left: 0;  margin: 0 auto;  padding: 0 1rem;  max-width: 1000px;  transform: translate(0, -50%);}#error-wrap .error-content {  display: flex;  flex-direction: row;  justify-content: center;  align-items: center;  margin: 0 1rem;  height: 18rem;  border-radius: 8px;  background: var(--card-bg);  box-shadow: var(--card-box-shadow);  transition: all 0.3s;}#error-wrap .error-content .error-img {  box-flex: 1;  flex: 1;  height: 100%;  border-top-left-radius: 8px;  border-bottom-left-radius: 8px;  background-color: #3b70fc;  background-position: center;  background-size: cover;}#error-wrap .error-content .error-info {  box-flex: 1;  flex: 1;  padding: 0.5rem;  text-align: center;  font-size: 14px;  font-family: Titillium Web, "PingFang SC", "Hiragino Sans GB", "Microsoft JhengHei", "Microsoft YaHei", sans-serif;}#error-wrap .error-content .error-info .error_title {  margin-top: -4rem;  font-size: 9em;}#error-wrap .error-content .error-info .error_subtitle {  margin-top: -3.5rem;  word-break: break-word;  font-size: 1.6em;}#error-wrap .error-content .error-info a {  display: inline-block;  margin-top: 0.5rem;  padding: 0.3rem 1.5rem;  background: var(--btn-bg);  color: var(--btn-color);}#body-wrap.error .aside-list {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  bottom: 0px;  position: absolute;  padding: 1rem;  width: 100%;  overflow: scroll;}#body-wrap.error .aside-list .aside-list-group {  display: flex;  flex-direction: row;  flex-wrap: nowrap;  max-width: 1200px;  margin: 0 auto;}#body-wrap.error .aside-list .aside-list-item {  padding: 0.5rem;}#body-wrap.error .aside-list .aside-list-item img {  width: 100%;  object-fit: cover;  border-radius: 12px;}#body-wrap.error .aside-list .aside-list-item .thumbnail {  overflow: hidden;  width: 230px;  height: 143px;  background: var(--anzhiyu-card-bg);  display: flex;}#body-wrap.error .aside-list .aside-list-item .content .title {  -webkit-line-clamp: 2;  overflow: hidden;  display: -webkit-box;  -webkit-box-orient: vertical;  line-height: 1.5;  justify-content: center;  align-items: flex-end;  align-content: center;  padding-top: 0.5rem;  color: white;}#body-wrap.error .aside-list .aside-list-item .content time {  display: none;}/* 代码框主题 */#article-container figure.highlight {  border-radius: 10px;}]]></content>
      
    </entry>
    
    
  
</search>
